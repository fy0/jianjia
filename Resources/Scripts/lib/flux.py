# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_flux', [dirname(__file__)])
        except ImportError:
            import _flux
            return _flux
        if fp is not None:
            try:
                _mod = imp.load_module('_flux', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _flux = swig_import_helper()
    del swig_import_helper
else:
    import _flux
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _flux.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _flux.SwigPyIterator_value(self)
    def incr(self, n=1): return _flux.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _flux.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _flux.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _flux.SwigPyIterator_equal(self, *args)
    def copy(self): return _flux.SwigPyIterator_copy(self)
    def next(self): return _flux.SwigPyIterator_next(self)
    def __next__(self): return _flux.SwigPyIterator___next__(self)
    def previous(self): return _flux.SwigPyIterator_previous(self)
    def advance(self, *args): return _flux.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _flux.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _flux.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _flux.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _flux.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _flux.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _flux.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _flux.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Object(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    __repr__ = _swig_repr
    def SetTag(self, *args): return _flux.Object_SetTag(self, *args)
    def GetTag(self, *args): return _flux.Object_GetTag(self, *args)
    def __init__(self): 
        this = _flux.new_Object()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flux.delete_Object
    __del__ = lambda self : None;
Object_swigregister = _flux.Object_swigregister
Object_swigregister(Object)

GL_DEPTH_TEST = _flux.GL_DEPTH_TEST
GL_LIGHTING = _flux.GL_LIGHTING
GL_COLOR_MATERIAL = _flux.GL_COLOR_MATERIAL
class PyCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flux.new_PyCallback()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flux.delete_PyCallback
    __del__ = lambda self : None;
PyCallback_swigregister = _flux.PyCallback_swigregister
PyCallback_swigregister(PyCallback)

class PyWorldCallback(PyCallback):
    __swig_setmethods__ = {}
    for _s in [PyCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyWorldCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [PyCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PyWorldCallback, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _flux.delete_PyWorldCallback
    __del__ = lambda self : None;
    def OnWake(self, *args): return _flux.PyWorldCallback_OnWake(self, *args)
    def __init__(self): 
        if self.__class__ == PyWorldCallback:
            _self = None
        else:
            _self = self
        this = _flux.new_PyWorldCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _flux.disown_PyWorldCallback(self)
        return weakref_proxy(self)
PyWorldCallback_swigregister = _flux.PyWorldCallback_swigregister
PyWorldCallback_swigregister(PyWorldCallback)

class PyScreenCallback(PyCallback):
    __swig_setmethods__ = {}
    for _s in [PyCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyScreenCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [PyCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PyScreenCallback, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _flux.delete_PyScreenCallback
    __del__ = lambda self : None;
    def OnInit(self): return _flux.PyScreenCallback_OnInit(self)
    def OnPush(self): return _flux.PyScreenCallback_OnPush(self)
    def OnPushEnd(self): return _flux.PyScreenCallback_OnPushEnd(self)
    def OnPop(self): return _flux.PyScreenCallback_OnPop(self)
    def OnResume(self, *args): return _flux.PyScreenCallback_OnResume(self, *args)
    def KeyInput(self, *args): return _flux.PyScreenCallback_KeyInput(self, *args)
    def __init__(self): 
        if self.__class__ == PyScreenCallback:
            _self = None
        else:
            _self = self
        this = _flux.new_PyScreenCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _flux.disown_PyScreenCallback(self)
        return weakref_proxy(self)
PyScreenCallback_swigregister = _flux.PyScreenCallback_swigregister
PyScreenCallback_swigregister(PyScreenCallback)

class PyChipmunkCallback(PyCallback):
    __swig_setmethods__ = {}
    for _s in [PyCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyChipmunkCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [PyCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PyChipmunkCallback, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable_update_vel"] = _flux.PyChipmunkCallback_enable_update_vel_set
    __swig_getmethods__["enable_update_vel"] = _flux.PyChipmunkCallback_enable_update_vel_get
    if _newclass:enable_update_vel = _swig_property(_flux.PyChipmunkCallback_enable_update_vel_get, _flux.PyChipmunkCallback_enable_update_vel_set)
    def __init__(self): 
        if self.__class__ == PyChipmunkCallback:
            _self = None
        else:
            _self = self
        this = _flux.new_PyChipmunkCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flux.delete_PyChipmunkCallback
    __del__ = lambda self : None;
    def CollisionBegin(self, *args): return _flux.PyChipmunkCallback_CollisionBegin(self, *args)
    def CollisionEnd(self, *args): return _flux.PyChipmunkCallback_CollisionEnd(self, *args)
    def UpdateVelocity(self, *args): return _flux.PyChipmunkCallback_UpdateVelocity(self, *args)
    def __disown__(self):
        self.this.disown()
        _flux.disown_PyChipmunkCallback(self)
        return weakref_proxy(self)
PyChipmunkCallback_swigregister = _flux.PyChipmunkCallback_swigregister
PyChipmunkCallback_swigregister(PyChipmunkCallback)

SCREEN_REPLACE = _flux.SCREEN_REPLACE
SCREEN_APPEND = _flux.SCREEN_APPEND
class World(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, World, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, World, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _flux.delete_World
    __del__ = lambda self : None;
    def Init(self, *args): return _flux.World_Init(self, *args)
    def StartGame(self): return _flux.World_StartGame(self)
    def EndGame(self): return _flux.World_EndGame(self)
    def LoadFont(self, *args): return _flux.World_LoadFont(self, *args)
    def PushScreen(self, *args): return _flux.World_PushScreen(self, *args)
    def PopScreen(self): return _flux.World_PopScreen(self)
    def PopAllScreen(self): return _flux.World_PopAllScreen(self)
    def GetActiveScreen(self): return _flux.World_GetActiveScreen(self)
    def WorldToPx(self, *args): return _flux.World_WorldToPx(self, *args)
    def PxToWorld(self, *args): return _flux.World_PxToWorld(self, *args)
    def SetPxSize(self, *args): return _flux.World_SetPxSize(self, *args)
    def GetBlock(self): return _flux.World_GetBlock(self)
    def GetPxSize(self): return _flux.World_GetPxSize(self)
    def GetSize(self): return _flux.World_GetSize(self)
    def SetTitle(self, *args): return _flux.World_SetTitle(self, *args)
    def GetTitle(self): return _flux.World_GetTitle(self)
    def SetPhy(self, *args): return _flux.World_SetPhy(self, *args)
    def SetAmbient(self, *args): return _flux.World_SetAmbient(self, *args)
    def InitGUI(self, *args): return _flux.World_InitGUI(self, *args)
    def GetGUI(self): return _flux.World_GetGUI(self)
    __swig_getmethods__["GetInstance"] = lambda x: _flux.World_GetInstance
    if _newclass:GetInstance = staticmethod(_flux.World_GetInstance)
    def SetSleep(self, *args): return _flux.World_SetSleep(self, *args)
    def SetPyCallBack(self, *args): return _flux.World_SetPyCallBack(self, *args)
    def GetWindowWidth(self): return _flux.World_GetWindowWidth(self)
    def GetWindowHeight(self): return _flux.World_GetWindowHeight(self)
    def __init__(self): 
        this = _flux.new_World()
        try: self.this.append(this)
        except: self.this = this
World_swigregister = _flux.World_swigregister
World_swigregister(World)

def World_GetInstance():
  return _flux.World_GetInstance()
World_GetInstance = _flux.World_GetInstance

class Audio(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Audio, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Audio, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flux.new_Audio()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flux.delete_Audio
    __del__ = lambda self : None;
    def Update(self, *args): return _flux.Audio_Update(self, *args)
    def LoadMusic(self, *args): return _flux.Audio_LoadMusic(self, *args)
    def LoadSound(self, *args): return _flux.Audio_LoadSound(self, *args)
    __swig_getmethods__["GetInstance"] = lambda x: _flux.Audio_GetInstance
    if _newclass:GetInstance = staticmethod(_flux.Audio_GetInstance)
    def SetBGM(self, *args): return _flux.Audio_SetBGM(self, *args)
    def GetBGM(self): return _flux.Audio_GetBGM(self)
    def PlaySound(self, *args): return _flux.Audio_PlaySound(self, *args)
    def SetVolume(self, volume=100): return _flux.Audio_SetVolume(self, volume)
    def GetVolume(self): return _flux.Audio_GetVolume(self)
    def SetBGMVolume(self, volume=100): return _flux.Audio_SetBGMVolume(self, volume)
    def GetBGMVolume(self): return _flux.Audio_GetBGMVolume(self)
    def SetSoundVolume(self, volume=100): return _flux.Audio_SetSoundVolume(self, volume)
    def GetSoundVolume(self): return _flux.Audio_GetSoundVolume(self)
Audio_swigregister = _flux.Audio_swigregister
Audio_swigregister(Audio)

def Audio_GetInstance():
  return _flux.Audio_GetInstance()
Audio_GetInstance = _flux.Audio_GetInstance

class Camera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flux.new_Camera()
        try: self.this.append(this)
        except: self.this = this
    def Reset(self): return _flux.Camera_Reset(self)
    def SetHUDCamera(self): return _flux.Camera_SetHUDCamera(self)
    def SetSize(self, *args): return _flux.Camera_SetSize(self, *args)
    def SetRegion(self, *args): return _flux.Camera_SetRegion(self, *args)
    def SetCenterRegion(self, *args): return _flux.Camera_SetCenterRegion(self, *args)
    def SetFocus(self, *args): return _flux.Camera_SetFocus(self, *args)
    def GetViewRadius(self): return _flux.Camera_GetViewRadius(self)
    def Update(self, *args): return _flux.Camera_Update(self, *args)
    def GetPosition(self): return _flux.Camera_GetPosition(self)
    def SetPosition(self, *args): return _flux.Camera_SetPosition(self, *args)
    __swig_getmethods__["GetInstance"] = lambda x: _flux.Camera_GetInstance
    if _newclass:GetInstance = staticmethod(_flux.Camera_GetInstance)
    __swig_destroy__ = _flux.delete_Camera
    __del__ = lambda self : None;
Camera_swigregister = _flux.Camera_swigregister
Camera_swigregister(Camera)

def Camera_GetInstance():
  return _flux.Camera_GetInstance()
Camera_GetInstance = _flux.Camera_GetInstance

_None = _flux._None
Horizon = _flux.Horizon
Vertical = _flux.Vertical
HV = _flux.HV
ALIGN_LEFT = _flux.ALIGN_LEFT
ALIGN_CENTER = _flux.ALIGN_CENTER
ALIGN_TOP = _flux.ALIGN_TOP
ALIGN_TOPLEFT = _flux.ALIGN_TOPLEFT
ALIGN_BOTTOM = _flux.ALIGN_BOTTOM
ALIGN_RIGHT = _flux.ALIGN_RIGHT
class View(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, View, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, View, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flux.new_View()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flux.delete_View
    __del__ = lambda self : None;
    def GetScreen(self): return _flux.View_GetScreen(self)
    def SetAnchor(self, *args): return _flux.View_SetAnchor(self, *args)
    def SetLayer(self, *args): return _flux.View_SetLayer(self, *args)
    def GetLayer(self): return _flux.View_GetLayer(self)
    def SetDisableFlag(self, *args): return _flux.View_SetDisableFlag(self, *args)
    def SetFlip(self, *args): return _flux.View_SetFlip(self, *args)
    def LockRemove(self, lock=True): return _flux.View_LockRemove(self, lock)
    def SetPaintMode(self, *args): return _flux.View_SetPaintMode(self, *args)
    def SetCutArea(self, *args): return _flux.View_SetCutArea(self, *args)
    def SetFrame(self, *args): return _flux.View_SetFrame(self, *args)
    def SetSprite(self, *args): return _flux.View_SetSprite(self, *args)
    def SetSpriteFrame(self, *args): return _flux.View_SetSpriteFrame(self, *args)
    def SetSize(self, *args): return _flux.View_SetSize(self, *args)
    def GetSize(self): return _flux.View_GetSize(self)
    def SetPosition(self, *args): return _flux.View_SetPosition(self, *args)
    def GetPosition(self): return _flux.View_GetPosition(self)
    def SetHUD(self, *args): return _flux.View_SetHUD(self, *args)
    def SetColor(self, *args): return _flux.View_SetColor(self, *args)
    def SetAlpha(self, *args): return _flux.View_SetAlpha(self, *args)
    def GetAlpha(self): return _flux.View_GetAlpha(self)
    def GetColor(self): return _flux.View_GetColor(self)
    def SetRotation(self, *args): return _flux.View_SetRotation(self, *args)
    def GetRotation(self): return _flux.View_GetRotation(self)
    def SetVisible(self, *args): return _flux.View_SetVisible(self, *args)
    def GetVisible(self): return _flux.View_GetVisible(self)
    def FadeIn(self, *args): return _flux.View_FadeIn(self, *args)
    def FadeOut(self, *args): return _flux.View_FadeOut(self, *args)
    def FadeTo(self, *args): return _flux.View_FadeTo(self, *args)
    def MoveTo(self, *args): return _flux.View_MoveTo(self, *args)
    def RotateTo(self, *args): return _flux.View_RotateTo(self, *args)
    def Sleep(self, *args): return _flux.View_Sleep(self, *args)
    def RecolorTo(self, *args): return _flux.View_RecolorTo(self, *args)
    def ResizeTo(self, *args): return _flux.View_ResizeTo(self, *args)
    def AddFrameAnim(self, *args): return _flux.View_AddFrameAnim(self, *args)
    def PlayFrame(self, *args): return _flux.View_PlayFrame(self, *args)
    def AnimDo(self): return _flux.View_AnimDo(self)
    def Loop(self, index=0): return _flux.View_Loop(self, index)
    def AnimCancel(self): return _flux.View_AnimCancel(self)
    def SetAnimPause(self, *args): return _flux.View_SetAnimPause(self, *args)
    def SetTag(self, *args): return _flux.View_SetTag(self, *args)
    def GetTag(self, *args): return _flux.View_GetTag(self, *args)
    def GetID(self): return _flux.View_GetID(self)
View_swigregister = _flux.View_swigregister
View_swigregister(View)

class Screen(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Screen, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Screen, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flux.new_Screen()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flux.delete_Screen
    __del__ = lambda self : None;
    def Render(self): return _flux.Screen_Render(self)
    def Update(self, *args): return _flux.Screen_Update(self, *args)
    def KeyInput(self, *args): return _flux.Screen_KeyInput(self, *args)
    def OnPush(self): return _flux.Screen_OnPush(self)
    def OnPushEnd(self): return _flux.Screen_OnPushEnd(self)
    def OnPop(self): return _flux.Screen_OnPop(self)
    def OnResume(self, *args): return _flux.Screen_OnResume(self, *args)
    def SetFromCode(self, *args): return _flux.Screen_SetFromCode(self, *args)
    def SetRetCode(self, *args): return _flux.Screen_SetRetCode(self, *args)
    def RegKey(self, *args): return _flux.Screen_RegKey(self, *args)
    def AddView(self, *args): return _flux.Screen_AddView(self, *args)
    def RemoveView(self, *args): return _flux.Screen_RemoveView(self, *args)
    def RemoveAllView(self): return _flux.Screen_RemoveAllView(self)
    def LoadScene(self, scene=""): return _flux.Screen_LoadScene(self, scene)
    def RemoveScene(self, *args): return _flux.Screen_RemoveScene(self, *args)
    def SetTmxmap(self, *args): return _flux.Screen_SetTmxmap(self, *args)
    def SetPyCallBack(self, *args): return _flux.Screen_SetPyCallBack(self, *args)
Screen_swigregister = _flux.Screen_swigregister
Screen_swigregister(Screen)

class TextView(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextView, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextView, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _flux.new_TextView(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetTextAreaWidth(self, *args): return _flux.TextView_SetTextAreaWidth(self, *args)
    def SetTextColor(self, *args): return _flux.TextView_SetTextColor(self, *args)
    def SetLineSpacing(self, *args): return _flux.TextView_SetLineSpacing(self, *args)
    def SetAlign(self, *args): return _flux.TextView_SetAlign(self, *args)
    def SetAlpha(self, *args): return _flux.TextView_SetAlpha(self, *args)
    def SetSize(self, *args): return _flux.TextView_SetSize(self, *args)
    def SetPosition(self, *args): return _flux.TextView_SetPosition(self, *args)
    def SetPadding(self, *args): return _flux.TextView_SetPadding(self, *args)
    def SetFont(self, *args): return _flux.TextView_SetFont(self, *args)
    def SetTextSize(self, *args): return _flux.TextView_SetTextSize(self, *args)
    def SetText(self, *args): return _flux.TextView_SetText(self, *args)
    def FadeIn(self, *args): return _flux.TextView_FadeIn(self, *args)
    def FadeOut(self, *args): return _flux.TextView_FadeOut(self, *args)
    def FadeTo(self, *args): return _flux.TextView_FadeTo(self, *args)
    def SetPrintIn(self, speed=20, callback=None): return _flux.TextView_SetPrintIn(self, speed, callback)
    __swig_destroy__ = _flux.delete_TextView
    __del__ = lambda self : None;
TextView_swigregister = _flux.TextView_swigregister
TextView_swigregister(TextView)

class ParticleView(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleView, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleView, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flux.new_ParticleView()
        try: self.this.append(this)
        except: self.this = this
    def SetParticlesPerSecond(self, *args): return _flux.ParticleView_SetParticlesPerSecond(self, *args)
    def SetSystemLifetime(self, *args): return _flux.ParticleView_SetSystemLifetime(self, *args)
    def SetParticleLifetime(self, *args): return _flux.ParticleView_SetParticleLifetime(self, *args)
    def SetSpread(self, *args): return _flux.ParticleView_SetSpread(self, *args)
    def SetEndScale(self, *args): return _flux.ParticleView_SetEndScale(self, *args)
    def SetEndColor(self, *args): return _flux.ParticleView_SetEndColor(self, *args)
    def SetSpeedRange(self, *args): return _flux.ParticleView_SetSpeedRange(self, *args)
    def SetMinSpeed(self, *args): return _flux.ParticleView_SetMinSpeed(self, *args)
    def SetMaxSpeed(self, *args): return _flux.ParticleView_SetMaxSpeed(self, *args)
    def SetGravity(self, *args): return _flux.ParticleView_SetGravity(self, *args)
    def SetAttractor(self, *args): return _flux.ParticleView_SetAttractor(self, *args)
    def SetAttractorStrength(self, *args): return _flux.ParticleView_SetAttractorStrength(self, *args)
    def SetMaxParticles(self, *args): return _flux.ParticleView_SetMaxParticles(self, *args)
    __swig_destroy__ = _flux.delete_ParticleView
    __del__ = lambda self : None;
ParticleView_swigregister = _flux.ParticleView_swigregister
ParticleView_swigregister(ParticleView)

class Vec2i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _flux.Vec2i_x_set
    __swig_getmethods__["x"] = _flux.Vec2i_x_get
    if _newclass:x = _swig_property(_flux.Vec2i_x_get, _flux.Vec2i_x_set)
    __swig_setmethods__["y"] = _flux.Vec2i_y_set
    __swig_getmethods__["y"] = _flux.Vec2i_y_get
    if _newclass:y = _swig_property(_flux.Vec2i_y_get, _flux.Vec2i_y_set)
    def __init__(self, *args): 
        this = _flux.new_Vec2i(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flux.delete_Vec2i
    __del__ = lambda self : None;
Vec2i_swigregister = _flux.Vec2i_swigregister
Vec2i_swigregister(Vec2i)

class Vec2ui(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2ui, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2ui, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _flux.Vec2ui_x_set
    __swig_getmethods__["x"] = _flux.Vec2ui_x_get
    if _newclass:x = _swig_property(_flux.Vec2ui_x_get, _flux.Vec2ui_x_set)
    __swig_setmethods__["y"] = _flux.Vec2ui_y_set
    __swig_getmethods__["y"] = _flux.Vec2ui_y_get
    if _newclass:y = _swig_property(_flux.Vec2ui_y_get, _flux.Vec2ui_y_set)
    def __init__(self, *args): 
        this = _flux.new_Vec2ui(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flux.delete_Vec2ui
    __del__ = lambda self : None;
Vec2ui_swigregister = _flux.Vec2ui_swigregister
Vec2ui_swigregister(Vec2ui)

class Vec3i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _flux.Vec3i_x_set
    __swig_getmethods__["x"] = _flux.Vec3i_x_get
    if _newclass:x = _swig_property(_flux.Vec3i_x_get, _flux.Vec3i_x_set)
    __swig_setmethods__["y"] = _flux.Vec3i_y_set
    __swig_getmethods__["y"] = _flux.Vec3i_y_get
    if _newclass:y = _swig_property(_flux.Vec3i_y_get, _flux.Vec3i_y_set)
    __swig_setmethods__["Z"] = _flux.Vec3i_Z_set
    __swig_getmethods__["Z"] = _flux.Vec3i_Z_get
    if _newclass:Z = _swig_property(_flux.Vec3i_Z_get, _flux.Vec3i_Z_set)
    def __init__(self, *args): 
        this = _flux.new_Vec3i(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flux.delete_Vec3i
    __del__ = lambda self : None;
Vec3i_swigregister = _flux.Vec3i_swigregister
Vec3i_swigregister(Vec3i)

class Vec3ui(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3ui, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3ui, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _flux.Vec3ui_x_set
    __swig_getmethods__["x"] = _flux.Vec3ui_x_get
    if _newclass:x = _swig_property(_flux.Vec3ui_x_get, _flux.Vec3ui_x_set)
    __swig_setmethods__["y"] = _flux.Vec3ui_y_set
    __swig_getmethods__["y"] = _flux.Vec3ui_y_get
    if _newclass:y = _swig_property(_flux.Vec3ui_y_get, _flux.Vec3ui_y_set)
    __swig_setmethods__["Z"] = _flux.Vec3ui_Z_set
    __swig_getmethods__["Z"] = _flux.Vec3ui_Z_get
    if _newclass:Z = _swig_property(_flux.Vec3ui_Z_get, _flux.Vec3ui_Z_set)
    def __init__(self, *args): 
        this = _flux.new_Vec3ui(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flux.delete_Vec3ui
    __del__ = lambda self : None;
Vec3ui_swigregister = _flux.Vec3ui_swigregister
Vec3ui_swigregister(Vec3ui)

class Vector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _flux.Vector2_x_set
    __swig_getmethods__["x"] = _flux.Vector2_x_get
    if _newclass:x = _swig_property(_flux.Vector2_x_get, _flux.Vector2_x_set)
    __swig_setmethods__["y"] = _flux.Vector2_y_set
    __swig_getmethods__["y"] = _flux.Vector2_y_get
    if _newclass:y = _swig_property(_flux.Vector2_y_get, _flux.Vector2_y_set)
    def __init__(self, *args): 
        this = _flux.new_Vector2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["Rotate"] = lambda x: _flux.Vector2_Rotate
    if _newclass:Rotate = staticmethod(_flux.Vector2_Rotate)
    __swig_destroy__ = _flux.delete_Vector2
    __del__ = lambda self : None;
Vector2_swigregister = _flux.Vector2_swigregister
Vector2_swigregister(Vector2)

def Vector2_Rotate(*args):
  return _flux.Vector2_Rotate(*args)
Vector2_Rotate = _flux.Vector2_Rotate

class Vector3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _flux.Vector3_x_set
    __swig_getmethods__["x"] = _flux.Vector3_x_get
    if _newclass:x = _swig_property(_flux.Vector3_x_get, _flux.Vector3_x_set)
    __swig_setmethods__["y"] = _flux.Vector3_y_set
    __swig_getmethods__["y"] = _flux.Vector3_y_get
    if _newclass:y = _swig_property(_flux.Vector3_y_get, _flux.Vector3_y_set)
    __swig_setmethods__["z"] = _flux.Vector3_z_set
    __swig_getmethods__["z"] = _flux.Vector3_z_get
    if _newclass:z = _swig_property(_flux.Vector3_z_get, _flux.Vector3_z_set)
    def __init__(self, *args): 
        this = _flux.new_Vector3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flux.delete_Vector3
    __del__ = lambda self : None;
Vector3_swigregister = _flux.Vector3_swigregister
Vector3_swigregister(Vector3)

class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    __swig_setmethods__["R"] = _flux.Color_R_set
    __swig_getmethods__["R"] = _flux.Color_R_get
    if _newclass:R = _swig_property(_flux.Color_R_get, _flux.Color_R_set)
    __swig_setmethods__["G"] = _flux.Color_G_set
    __swig_getmethods__["G"] = _flux.Color_G_get
    if _newclass:G = _swig_property(_flux.Color_G_get, _flux.Color_G_set)
    __swig_setmethods__["B"] = _flux.Color_B_set
    __swig_getmethods__["B"] = _flux.Color_B_get
    if _newclass:B = _swig_property(_flux.Color_B_get, _flux.Color_B_set)
    __swig_setmethods__["A"] = _flux.Color_A_set
    __swig_getmethods__["A"] = _flux.Color_A_get
    if _newclass:A = _swig_property(_flux.Color_A_get, _flux.Color_A_set)
    def __init__(self, *args): 
        this = _flux.new_Color(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _flux.Color___eq__(self, *args)
    def __ne__(self, *args): return _flux.Color___ne__(self, *args)
    def __sub__(self, *args): return _flux.Color___sub__(self, *args)
    def __add__(self, *args): return _flux.Color___add__(self, *args)
    def __div__(self, *args): return _flux.Color___div__(self, *args)
    def __mul__(self, *args): return _flux.Color___mul__(self, *args)
    __swig_destroy__ = _flux.delete_Color
    __del__ = lambda self : None;
Color_swigregister = _flux.Color_swigregister
Color_swigregister(Color)

TD_NONE = _flux.TD_NONE
TD_LEFT = _flux.TD_LEFT
TD_RIGHT = _flux.TD_RIGHT
TD_UP = _flux.TD_UP
TD_DOWN = _flux.TD_DOWN
class TileCharacter(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TileCharacter, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TileCharacter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flux.new_TileCharacter()
        try: self.this.append(this)
        except: self.this = this
    def SetDir(self, *args): return _flux.TileCharacter_SetDir(self, *args)
    def GetDir(self): return _flux.TileCharacter_GetDir(self)
    def move(self, *args): return _flux.TileCharacter_move(self, *args)
    def move_cancel(self, *args): return _flux.TileCharacter_move_cancel(self, *args)
    def SetSpeed(self, *args): return _flux.TileCharacter_SetSpeed(self, *args)
    def IsMoving(self): return _flux.TileCharacter_IsMoving(self)
    def Stop(self): return _flux.TileCharacter_Stop(self)
    def lua_MoveCallback(self, *args): return _flux.TileCharacter_lua_MoveCallback(self, *args)
    __swig_destroy__ = _flux.delete_TileCharacter
    __del__ = lambda self : None;
TileCharacter_swigregister = _flux.TileCharacter_swigregister
TileCharacter_swigregister(TileCharacter)

PD_NONE = _flux.PD_NONE
PD_LEFT = _flux.PD_LEFT
PD_RIGHT = _flux.PD_RIGHT
class PlatformerCharacter(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlatformerCharacter, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlatformerCharacter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["speed"] = _flux.PlatformerCharacter_speed_set
    __swig_getmethods__["speed"] = _flux.PlatformerCharacter_speed_get
    if _newclass:speed = _swig_property(_flux.PlatformerCharacter_speed_get, _flux.PlatformerCharacter_speed_set)
    __swig_setmethods__["dir"] = _flux.PlatformerCharacter_dir_set
    __swig_getmethods__["dir"] = _flux.PlatformerCharacter_dir_get
    if _newclass:dir = _swig_property(_flux.PlatformerCharacter_dir_get, _flux.PlatformerCharacter_dir_set)
    def __init__(self): 
        this = _flux.new_PlatformerCharacter()
        try: self.this.append(this)
        except: self.this = this
    def SetDir(self, *args): return _flux.PlatformerCharacter_SetDir(self, *args)
    def GetDir(self): return _flux.PlatformerCharacter_GetDir(self)
    def SetSpeed(self, *args): return _flux.PlatformerCharacter_SetSpeed(self, *args)
    def move(self, *args): return _flux.PlatformerCharacter_move(self, *args)
    def move_cancel(self, *args): return _flux.PlatformerCharacter_move_cancel(self, *args)
    def IsMoving(self): return _flux.PlatformerCharacter_IsMoving(self)
    def Stop(self): return _flux.PlatformerCharacter_Stop(self)
    def jump(self): return _flux.PlatformerCharacter_jump(self)
    def Update(self, *args): return _flux.PlatformerCharacter_Update(self, *args)
    def lua_MoveCallback(self, *args): return _flux.PlatformerCharacter_lua_MoveCallback(self, *args)
    def lua_JumpCallback(self, *args): return _flux.PlatformerCharacter_lua_JumpCallback(self, *args)
    def lua_HeavyCallback(self, *args): return _flux.PlatformerCharacter_lua_HeavyCallback(self, *args)
    __swig_destroy__ = _flux.delete_PlatformerCharacter
    __del__ = lambda self : None;
PlatformerCharacter_swigregister = _flux.PlatformerCharacter_swigregister
PlatformerCharacter_swigregister(PlatformerCharacter)

GLFW_RELEASE = _flux.GLFW_RELEASE
GLFW_PRESS = _flux.GLFW_PRESS
GLFW_REPEAT = _flux.GLFW_REPEAT
GLFW_KEY_UNKNOWN = _flux.GLFW_KEY_UNKNOWN
GLFW_KEY_SPACE = _flux.GLFW_KEY_SPACE
GLFW_KEY_APOSTROPHE = _flux.GLFW_KEY_APOSTROPHE
GLFW_KEY_COMMA = _flux.GLFW_KEY_COMMA
GLFW_KEY_MINUS = _flux.GLFW_KEY_MINUS
GLFW_KEY_PERIOD = _flux.GLFW_KEY_PERIOD
GLFW_KEY_SLASH = _flux.GLFW_KEY_SLASH
GLFW_KEY_0 = _flux.GLFW_KEY_0
GLFW_KEY_1 = _flux.GLFW_KEY_1
GLFW_KEY_2 = _flux.GLFW_KEY_2
GLFW_KEY_3 = _flux.GLFW_KEY_3
GLFW_KEY_4 = _flux.GLFW_KEY_4
GLFW_KEY_5 = _flux.GLFW_KEY_5
GLFW_KEY_6 = _flux.GLFW_KEY_6
GLFW_KEY_7 = _flux.GLFW_KEY_7
GLFW_KEY_8 = _flux.GLFW_KEY_8
GLFW_KEY_9 = _flux.GLFW_KEY_9
GLFW_KEY_SEMICOLON = _flux.GLFW_KEY_SEMICOLON
GLFW_KEY_EQUAL = _flux.GLFW_KEY_EQUAL
GLFW_KEY_A = _flux.GLFW_KEY_A
GLFW_KEY_B = _flux.GLFW_KEY_B
GLFW_KEY_C = _flux.GLFW_KEY_C
GLFW_KEY_D = _flux.GLFW_KEY_D
GLFW_KEY_E = _flux.GLFW_KEY_E
GLFW_KEY_F = _flux.GLFW_KEY_F
GLFW_KEY_G = _flux.GLFW_KEY_G
GLFW_KEY_H = _flux.GLFW_KEY_H
GLFW_KEY_I = _flux.GLFW_KEY_I
GLFW_KEY_J = _flux.GLFW_KEY_J
GLFW_KEY_K = _flux.GLFW_KEY_K
GLFW_KEY_L = _flux.GLFW_KEY_L
GLFW_KEY_M = _flux.GLFW_KEY_M
GLFW_KEY_N = _flux.GLFW_KEY_N
GLFW_KEY_O = _flux.GLFW_KEY_O
GLFW_KEY_P = _flux.GLFW_KEY_P
GLFW_KEY_Q = _flux.GLFW_KEY_Q
GLFW_KEY_R = _flux.GLFW_KEY_R
GLFW_KEY_S = _flux.GLFW_KEY_S
GLFW_KEY_T = _flux.GLFW_KEY_T
GLFW_KEY_U = _flux.GLFW_KEY_U
GLFW_KEY_V = _flux.GLFW_KEY_V
GLFW_KEY_W = _flux.GLFW_KEY_W
GLFW_KEY_X = _flux.GLFW_KEY_X
GLFW_KEY_Y = _flux.GLFW_KEY_Y
GLFW_KEY_Z = _flux.GLFW_KEY_Z
GLFW_KEY_LEFT_BRACKET = _flux.GLFW_KEY_LEFT_BRACKET
GLFW_KEY_BACKSLASH = _flux.GLFW_KEY_BACKSLASH
GLFW_KEY_RIGHT_BRACKET = _flux.GLFW_KEY_RIGHT_BRACKET
GLFW_KEY_GRAVE_ACCENT = _flux.GLFW_KEY_GRAVE_ACCENT
GLFW_KEY_WORLD_1 = _flux.GLFW_KEY_WORLD_1
GLFW_KEY_WORLD_2 = _flux.GLFW_KEY_WORLD_2
GLFW_KEY_ESCAPE = _flux.GLFW_KEY_ESCAPE
GLFW_KEY_ENTER = _flux.GLFW_KEY_ENTER
GLFW_KEY_TAB = _flux.GLFW_KEY_TAB
GLFW_KEY_BACKSPACE = _flux.GLFW_KEY_BACKSPACE
GLFW_KEY_INSERT = _flux.GLFW_KEY_INSERT
GLFW_KEY_DELETE = _flux.GLFW_KEY_DELETE
GLFW_KEY_RIGHT = _flux.GLFW_KEY_RIGHT
GLFW_KEY_LEFT = _flux.GLFW_KEY_LEFT
GLFW_KEY_DOWN = _flux.GLFW_KEY_DOWN
GLFW_KEY_UP = _flux.GLFW_KEY_UP
GLFW_KEY_PAGE_UP = _flux.GLFW_KEY_PAGE_UP
GLFW_KEY_PAGE_DOWN = _flux.GLFW_KEY_PAGE_DOWN
GLFW_KEY_HOME = _flux.GLFW_KEY_HOME
GLFW_KEY_END = _flux.GLFW_KEY_END
GLFW_KEY_CAPS_LOCK = _flux.GLFW_KEY_CAPS_LOCK
GLFW_KEY_SCROLL_LOCK = _flux.GLFW_KEY_SCROLL_LOCK
GLFW_KEY_NUM_LOCK = _flux.GLFW_KEY_NUM_LOCK
GLFW_KEY_PRINT_SCREEN = _flux.GLFW_KEY_PRINT_SCREEN
GLFW_KEY_PAUSE = _flux.GLFW_KEY_PAUSE
GLFW_KEY_F1 = _flux.GLFW_KEY_F1
GLFW_KEY_F2 = _flux.GLFW_KEY_F2
GLFW_KEY_F3 = _flux.GLFW_KEY_F3
GLFW_KEY_F4 = _flux.GLFW_KEY_F4
GLFW_KEY_F5 = _flux.GLFW_KEY_F5
GLFW_KEY_F6 = _flux.GLFW_KEY_F6
GLFW_KEY_F7 = _flux.GLFW_KEY_F7
GLFW_KEY_F8 = _flux.GLFW_KEY_F8
GLFW_KEY_F9 = _flux.GLFW_KEY_F9
GLFW_KEY_F10 = _flux.GLFW_KEY_F10
GLFW_KEY_F11 = _flux.GLFW_KEY_F11
GLFW_KEY_F12 = _flux.GLFW_KEY_F12
GLFW_KEY_F13 = _flux.GLFW_KEY_F13
GLFW_KEY_F14 = _flux.GLFW_KEY_F14
GLFW_KEY_F15 = _flux.GLFW_KEY_F15
GLFW_KEY_F16 = _flux.GLFW_KEY_F16
GLFW_KEY_F17 = _flux.GLFW_KEY_F17
GLFW_KEY_F18 = _flux.GLFW_KEY_F18
GLFW_KEY_F19 = _flux.GLFW_KEY_F19
GLFW_KEY_F20 = _flux.GLFW_KEY_F20
GLFW_KEY_F21 = _flux.GLFW_KEY_F21
GLFW_KEY_F22 = _flux.GLFW_KEY_F22
GLFW_KEY_F23 = _flux.GLFW_KEY_F23
GLFW_KEY_F24 = _flux.GLFW_KEY_F24
GLFW_KEY_F25 = _flux.GLFW_KEY_F25
GLFW_KEY_KP_0 = _flux.GLFW_KEY_KP_0
GLFW_KEY_KP_1 = _flux.GLFW_KEY_KP_1
GLFW_KEY_KP_2 = _flux.GLFW_KEY_KP_2
GLFW_KEY_KP_3 = _flux.GLFW_KEY_KP_3
GLFW_KEY_KP_4 = _flux.GLFW_KEY_KP_4
GLFW_KEY_KP_5 = _flux.GLFW_KEY_KP_5
GLFW_KEY_KP_6 = _flux.GLFW_KEY_KP_6
GLFW_KEY_KP_7 = _flux.GLFW_KEY_KP_7
GLFW_KEY_KP_8 = _flux.GLFW_KEY_KP_8
GLFW_KEY_KP_9 = _flux.GLFW_KEY_KP_9
GLFW_KEY_KP_DECIMAL = _flux.GLFW_KEY_KP_DECIMAL
GLFW_KEY_KP_DIVIDE = _flux.GLFW_KEY_KP_DIVIDE
GLFW_KEY_KP_MULTIPLY = _flux.GLFW_KEY_KP_MULTIPLY
GLFW_KEY_KP_SUBTRACT = _flux.GLFW_KEY_KP_SUBTRACT
GLFW_KEY_KP_ADD = _flux.GLFW_KEY_KP_ADD
GLFW_KEY_KP_ENTER = _flux.GLFW_KEY_KP_ENTER
GLFW_KEY_KP_EQUAL = _flux.GLFW_KEY_KP_EQUAL
GLFW_KEY_LEFT_SHIFT = _flux.GLFW_KEY_LEFT_SHIFT
GLFW_KEY_LEFT_CONTROL = _flux.GLFW_KEY_LEFT_CONTROL
GLFW_KEY_LEFT_ALT = _flux.GLFW_KEY_LEFT_ALT
GLFW_KEY_LEFT_SUPER = _flux.GLFW_KEY_LEFT_SUPER
GLFW_KEY_RIGHT_SHIFT = _flux.GLFW_KEY_RIGHT_SHIFT
GLFW_KEY_RIGHT_CONTROL = _flux.GLFW_KEY_RIGHT_CONTROL
GLFW_KEY_RIGHT_ALT = _flux.GLFW_KEY_RIGHT_ALT
GLFW_KEY_RIGHT_SUPER = _flux.GLFW_KEY_RIGHT_SUPER
GLFW_KEY_MENU = _flux.GLFW_KEY_MENU
GLFW_KEY_LAST = _flux.GLFW_KEY_LAST
GLFW_MOD_SHIFT = _flux.GLFW_MOD_SHIFT
GLFW_MOD_CONTROL = _flux.GLFW_MOD_CONTROL
GLFW_MOD_ALT = _flux.GLFW_MOD_ALT
GLFW_MOD_SUPER = _flux.GLFW_MOD_SUPER
GLFW_MOUSE_BUTTON_1 = _flux.GLFW_MOUSE_BUTTON_1
GLFW_MOUSE_BUTTON_2 = _flux.GLFW_MOUSE_BUTTON_2
GLFW_MOUSE_BUTTON_3 = _flux.GLFW_MOUSE_BUTTON_3
GLFW_MOUSE_BUTTON_4 = _flux.GLFW_MOUSE_BUTTON_4
GLFW_MOUSE_BUTTON_5 = _flux.GLFW_MOUSE_BUTTON_5
GLFW_MOUSE_BUTTON_6 = _flux.GLFW_MOUSE_BUTTON_6
GLFW_MOUSE_BUTTON_7 = _flux.GLFW_MOUSE_BUTTON_7
GLFW_MOUSE_BUTTON_8 = _flux.GLFW_MOUSE_BUTTON_8
GLFW_MOUSE_BUTTON_LAST = _flux.GLFW_MOUSE_BUTTON_LAST
GLFW_MOUSE_BUTTON_LEFT = _flux.GLFW_MOUSE_BUTTON_LEFT
GLFW_MOUSE_BUTTON_RIGHT = _flux.GLFW_MOUSE_BUTTON_RIGHT
GLFW_MOUSE_BUTTON_MIDDLE = _flux.GLFW_MOUSE_BUTTON_MIDDLE
GLFW_JOYSTICK_1 = _flux.GLFW_JOYSTICK_1
GLFW_JOYSTICK_2 = _flux.GLFW_JOYSTICK_2
GLFW_JOYSTICK_3 = _flux.GLFW_JOYSTICK_3
GLFW_JOYSTICK_4 = _flux.GLFW_JOYSTICK_4
GLFW_JOYSTICK_5 = _flux.GLFW_JOYSTICK_5
GLFW_JOYSTICK_6 = _flux.GLFW_JOYSTICK_6
GLFW_JOYSTICK_7 = _flux.GLFW_JOYSTICK_7
GLFW_JOYSTICK_8 = _flux.GLFW_JOYSTICK_8
GLFW_JOYSTICK_9 = _flux.GLFW_JOYSTICK_9
GLFW_JOYSTICK_10 = _flux.GLFW_JOYSTICK_10
GLFW_JOYSTICK_11 = _flux.GLFW_JOYSTICK_11
GLFW_JOYSTICK_12 = _flux.GLFW_JOYSTICK_12
GLFW_JOYSTICK_13 = _flux.GLFW_JOYSTICK_13
GLFW_JOYSTICK_14 = _flux.GLFW_JOYSTICK_14
GLFW_JOYSTICK_15 = _flux.GLFW_JOYSTICK_15
GLFW_JOYSTICK_16 = _flux.GLFW_JOYSTICK_16
GLFW_JOYSTICK_LAST = _flux.GLFW_JOYSTICK_LAST
class TmxMap(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TmxMap, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TmxMap, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flux.new_TmxMap()
        try: self.this.append(this)
        except: self.this = this
    def Load(self, *args): return _flux.TmxMap_Load(self, *args)
    def SetMapColor(self, *args): return _flux.TmxMap_SetMapColor(self, *args)
    def GetMapColor(self): return _flux.TmxMap_GetMapColor(self)
    def SetBlockSize(self, *args): return _flux.TmxMap_SetBlockSize(self, *args)
    def SetAlpha(self, *args): return _flux.TmxMap_SetAlpha(self, *args)
    __swig_destroy__ = _flux.delete_TmxMap
    __del__ = lambda self : None;
TmxMap_swigregister = _flux.TmxMap_swigregister
TmxMap_swigregister(TmxMap)

class PhyData(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhyData, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PhyData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _flux.new_PhyData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["shape"] = _flux.PhyData_shape_set
    __swig_getmethods__["shape"] = _flux.PhyData_shape_get
    if _newclass:shape = _swig_property(_flux.PhyData_shape_get, _flux.PhyData_shape_set)
    __swig_setmethods__["index"] = _flux.PhyData_index_set
    __swig_getmethods__["index"] = _flux.PhyData_index_get
    if _newclass:index = _swig_property(_flux.PhyData_index_get, _flux.PhyData_index_set)
    __swig_setmethods__["v"] = _flux.PhyData_v_set
    __swig_getmethods__["v"] = _flux.PhyData_v_get
    if _newclass:v = _swig_property(_flux.PhyData_v_get, _flux.PhyData_v_set)
    __swig_destroy__ = _flux.delete_PhyData
    __del__ = lambda self : None;
PhyData_swigregister = _flux.PhyData_swigregister
PhyData_swigregister(PhyData)

class BasePhysics(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasePhysics, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasePhysics, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flux.new_BasePhysics()
        try: self.this.append(this)
        except: self.this = this
    def Init(self): return _flux.BasePhysics_Init(self)
    def SetGravity(self, *args): return _flux.BasePhysics_SetGravity(self, *args)
    def Update(self, *args): return _flux.BasePhysics_Update(self, *args)
    __swig_destroy__ = _flux.delete_BasePhysics
    __del__ = lambda self : None;
BasePhysics_swigregister = _flux.BasePhysics_swigregister
BasePhysics_swigregister(BasePhysics)

PHYINDEX_CHARACTER = _flux.PHYINDEX_CHARACTER
PHYINDEX_GROUND = _flux.PHYINDEX_GROUND
PHYINDEX_TOP = _flux.PHYINDEX_TOP
PHYINDEX_RIGHT = _flux.PHYINDEX_RIGHT
PHYINDEX_BOTTOM = _flux.PHYINDEX_BOTTOM
PHYINDEX_LEFT = _flux.PHYINDEX_LEFT
import phy
class ObjInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _flux.ObjInfo_type_set
    __swig_getmethods__["type"] = _flux.ObjInfo_type_get
    if _newclass:type = _swig_property(_flux.ObjInfo_type_get, _flux.ObjInfo_type_set)
    __swig_setmethods__["pos"] = _flux.ObjInfo_pos_set
    __swig_getmethods__["pos"] = _flux.ObjInfo_pos_get
    if _newclass:pos = _swig_property(_flux.ObjInfo_pos_get, _flux.ObjInfo_pos_set)
    __swig_setmethods__["data"] = _flux.ObjInfo_data_set
    __swig_getmethods__["data"] = _flux.ObjInfo_data_get
    if _newclass:data = _swig_property(_flux.ObjInfo_data_get, _flux.ObjInfo_data_set)
    def __init__(self): 
        this = _flux.new_ObjInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flux.delete_ObjInfo
    __del__ = lambda self : None;
ObjInfo_swigregister = _flux.ObjInfo_swigregister
ObjInfo_swigregister(ObjInfo)

class ChipmunkWorld(BasePhysics):
    __swig_setmethods__ = {}
    for _s in [BasePhysics]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChipmunkWorld, name, value)
    __swig_getmethods__ = {}
    for _s in [BasePhysics]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChipmunkWorld, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flux.new_ChipmunkWorld()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flux.delete_ChipmunkWorld
    __del__ = lambda self : None;
    def SetGravity(self, *args): return _flux.ChipmunkWorld_SetGravity(self, *args)
    def Update(self, *args): return _flux.ChipmunkWorld_Update(self, *args)
    def AddSyncShape(self, *args): return _flux.ChipmunkWorld_AddSyncShape(self, *args)
    def LinkView(self, *args): return _flux.ChipmunkWorld_LinkView(self, *args)
    def Add(self, *args): return _flux.ChipmunkWorld_Add(self, *args)
    def AddTileCharacter(self, *args): return _flux.ChipmunkWorld_AddTileCharacter(self, *args)
    def CollisionBegin(self, *args): return _flux.ChipmunkWorld_CollisionBegin(self, *args)
    def CollisionEnd(self, *args): return _flux.ChipmunkWorld_CollisionEnd(self, *args)
    def LoadTmx(self, *args): return _flux.ChipmunkWorld_LoadTmx(self, *args)
    def ClearTmx(self): return _flux.ChipmunkWorld_ClearTmx(self)
    def Stop(self, *args): return _flux.ChipmunkWorld_Stop(self, *args)
    def SetPos(self, *args): return _flux.ChipmunkWorld_SetPos(self, *args)
    def GetObjectInfo(self): return _flux.ChipmunkWorld_GetObjectInfo(self)
    def QueryView(self, *args): return _flux.ChipmunkWorld_QueryView(self, *args)
    def QueryViewByDir(self, *args): return _flux.ChipmunkWorld_QueryViewByDir(self, *args)
    def SetScreen(self, *args): return _flux.ChipmunkWorld_SetScreen(self, *args)
    def GetBody(self, *args): return _flux.ChipmunkWorld_GetBody(self, *args)
    def GetSpace(self): return _flux.ChipmunkWorld_GetSpace(self)
    def GetShapeList(self, *args): return _flux.ChipmunkWorld_GetShapeList(self, *args)
    def GetcpArbiterList(self, *args): return _flux.ChipmunkWorld_GetcpArbiterList(self, *args)
    def ShapeQuery(self, *args): return _flux.ChipmunkWorld_ShapeQuery(self, *args)
    def BBQuery(self, *args): return _flux.ChipmunkWorld_BBQuery(self, *args)
    def SegmentQuery(self, *args): return _flux.ChipmunkWorld_SegmentQuery(self, *args)
    def Pause(self): return _flux.ChipmunkWorld_Pause(self)
    def Continue(self): return _flux.ChipmunkWorld_Continue(self)
    def SetPyCallBack(self, *args): return _flux.ChipmunkWorld_SetPyCallBack(self, *args)
ChipmunkWorld_swigregister = _flux.ChipmunkWorld_swigregister
ChipmunkWorld_swigregister(ChipmunkWorld)


def CastToPhyData(*args):
  return _flux.CastToPhyData(*args)
CastToPhyData = _flux.CastToPhyData
class GwenUI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GwenUI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GwenUI, name)
    __repr__ = _swig_repr
    def Render(self): return _flux.GwenUI_Render(self)
    def __init__(self, *args): 
        this = _flux.new_GwenUI(*args)
        try: self.this.append(this)
        except: self.this = this
    def AddButton(self, *args): return _flux.GwenUI_AddButton(self, *args)
    __swig_destroy__ = _flux.delete_GwenUI
    __del__ = lambda self : None;
GwenUI_swigregister = _flux.GwenUI_swigregister
GwenUI_swigregister(GwenUI)

# This file is compatible with both classic and new-style classes.


