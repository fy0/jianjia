# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_phy', [dirname(__file__)])
        except ImportError:
            import _phy
            return _phy
        if fp is not None:
            try:
                _mod = imp.load_module('_phy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _phy = swig_import_helper()
    del swig_import_helper
else:
    import _phy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


CP_USE_DOUBLES = _phy.CP_USE_DOUBLES
INFINITY = _phy.INFINITY
M_PI = _phy.M_PI
M_E = _phy.M_E

def cpfmax(*args):
  return _phy.cpfmax(*args)
cpfmax = _phy.cpfmax

def cpfmin(*args):
  return _phy.cpfmin(*args)
cpfmin = _phy.cpfmin

def cpfabs(*args):
  return _phy.cpfabs(*args)
cpfabs = _phy.cpfabs

def cpfclamp(*args):
  return _phy.cpfclamp(*args)
cpfclamp = _phy.cpfclamp

def cpfclamp01(*args):
  return _phy.cpfclamp01(*args)
cpfclamp01 = _phy.cpfclamp01

def cpflerp(*args):
  return _phy.cpflerp(*args)
cpflerp = _phy.cpflerp

def cpflerpconst(*args):
  return _phy.cpflerpconst(*args)
cpflerpconst = _phy.cpflerpconst
cpTrue = _phy.cpTrue
cpFalse = _phy.cpFalse
class cpVect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpVect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpVect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _phy.cpVect_x_set
    __swig_getmethods__["x"] = _phy.cpVect_x_get
    if _newclass:x = _swig_property(_phy.cpVect_x_get, _phy.cpVect_x_set)
    __swig_setmethods__["y"] = _phy.cpVect_y_set
    __swig_getmethods__["y"] = _phy.cpVect_y_get
    if _newclass:y = _swig_property(_phy.cpVect_y_get, _phy.cpVect_y_set)
    def __init__(self): 
        this = _phy.new_cpVect()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _phy.delete_cpVect
    __del__ = lambda self : None;
cpVect_swigregister = _phy.cpVect_swigregister
cpVect_swigregister(cpVect)

class cpMat2x2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpMat2x2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpMat2x2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _phy.cpMat2x2_a_set
    __swig_getmethods__["a"] = _phy.cpMat2x2_a_get
    if _newclass:a = _swig_property(_phy.cpMat2x2_a_get, _phy.cpMat2x2_a_set)
    __swig_setmethods__["b"] = _phy.cpMat2x2_b_set
    __swig_getmethods__["b"] = _phy.cpMat2x2_b_get
    if _newclass:b = _swig_property(_phy.cpMat2x2_b_get, _phy.cpMat2x2_b_set)
    __swig_setmethods__["c"] = _phy.cpMat2x2_c_set
    __swig_getmethods__["c"] = _phy.cpMat2x2_c_get
    if _newclass:c = _swig_property(_phy.cpMat2x2_c_get, _phy.cpMat2x2_c_set)
    __swig_setmethods__["d"] = _phy.cpMat2x2_d_set
    __swig_getmethods__["d"] = _phy.cpMat2x2_d_get
    if _newclass:d = _swig_property(_phy.cpMat2x2_d_get, _phy.cpMat2x2_d_set)
    def __init__(self): 
        this = _phy.new_cpMat2x2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _phy.delete_cpMat2x2
    __del__ = lambda self : None;
cpMat2x2_swigregister = _phy.cpMat2x2_swigregister
cpMat2x2_swigregister(cpMat2x2)

class cpSpace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpSpace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpSpace, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iterations"] = _phy.cpSpace_iterations_set
    __swig_getmethods__["iterations"] = _phy.cpSpace_iterations_get
    if _newclass:iterations = _swig_property(_phy.cpSpace_iterations_get, _phy.cpSpace_iterations_set)
    __swig_setmethods__["gravity"] = _phy.cpSpace_gravity_set
    __swig_getmethods__["gravity"] = _phy.cpSpace_gravity_get
    if _newclass:gravity = _swig_property(_phy.cpSpace_gravity_get, _phy.cpSpace_gravity_set)
    __swig_setmethods__["damping"] = _phy.cpSpace_damping_set
    __swig_getmethods__["damping"] = _phy.cpSpace_damping_get
    if _newclass:damping = _swig_property(_phy.cpSpace_damping_get, _phy.cpSpace_damping_set)
    __swig_setmethods__["idleSpeedThreshold"] = _phy.cpSpace_idleSpeedThreshold_set
    __swig_getmethods__["idleSpeedThreshold"] = _phy.cpSpace_idleSpeedThreshold_get
    if _newclass:idleSpeedThreshold = _swig_property(_phy.cpSpace_idleSpeedThreshold_get, _phy.cpSpace_idleSpeedThreshold_set)
    __swig_setmethods__["sleepTimeThreshold"] = _phy.cpSpace_sleepTimeThreshold_set
    __swig_getmethods__["sleepTimeThreshold"] = _phy.cpSpace_sleepTimeThreshold_get
    if _newclass:sleepTimeThreshold = _swig_property(_phy.cpSpace_sleepTimeThreshold_get, _phy.cpSpace_sleepTimeThreshold_set)
    __swig_setmethods__["collisionSlop"] = _phy.cpSpace_collisionSlop_set
    __swig_getmethods__["collisionSlop"] = _phy.cpSpace_collisionSlop_get
    if _newclass:collisionSlop = _swig_property(_phy.cpSpace_collisionSlop_get, _phy.cpSpace_collisionSlop_set)
    __swig_setmethods__["collisionBias"] = _phy.cpSpace_collisionBias_set
    __swig_getmethods__["collisionBias"] = _phy.cpSpace_collisionBias_get
    if _newclass:collisionBias = _swig_property(_phy.cpSpace_collisionBias_get, _phy.cpSpace_collisionBias_set)
    __swig_setmethods__["collisionPersistence"] = _phy.cpSpace_collisionPersistence_set
    __swig_getmethods__["collisionPersistence"] = _phy.cpSpace_collisionPersistence_get
    if _newclass:collisionPersistence = _swig_property(_phy.cpSpace_collisionPersistence_get, _phy.cpSpace_collisionPersistence_set)
    __swig_setmethods__["enableContactGraph"] = _phy.cpSpace_enableContactGraph_set
    __swig_getmethods__["enableContactGraph"] = _phy.cpSpace_enableContactGraph_get
    if _newclass:enableContactGraph = _swig_property(_phy.cpSpace_enableContactGraph_get, _phy.cpSpace_enableContactGraph_set)
    __swig_setmethods__["data"] = _phy.cpSpace_data_set
    __swig_getmethods__["data"] = _phy.cpSpace_data_get
    if _newclass:data = _swig_property(_phy.cpSpace_data_get, _phy.cpSpace_data_set)
    __swig_setmethods__["staticBody"] = _phy.cpSpace_staticBody_set
    __swig_getmethods__["staticBody"] = _phy.cpSpace_staticBody_get
    if _newclass:staticBody = _swig_property(_phy.cpSpace_staticBody_get, _phy.cpSpace_staticBody_set)
    def __init__(self): 
        this = _phy.new_cpSpace()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _phy.delete_cpSpace
    __del__ = lambda self : None;
cpSpace_swigregister = _phy.cpSpace_swigregister
cpSpace_swigregister(cpSpace)

class cpBody(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpBody, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m"] = _phy.cpBody_m_set
    __swig_getmethods__["m"] = _phy.cpBody_m_get
    if _newclass:m = _swig_property(_phy.cpBody_m_get, _phy.cpBody_m_set)
    __swig_setmethods__["m_inv"] = _phy.cpBody_m_inv_set
    __swig_getmethods__["m_inv"] = _phy.cpBody_m_inv_get
    if _newclass:m_inv = _swig_property(_phy.cpBody_m_inv_get, _phy.cpBody_m_inv_set)
    __swig_setmethods__["i"] = _phy.cpBody_i_set
    __swig_getmethods__["i"] = _phy.cpBody_i_get
    if _newclass:i = _swig_property(_phy.cpBody_i_get, _phy.cpBody_i_set)
    __swig_setmethods__["i_inv"] = _phy.cpBody_i_inv_set
    __swig_getmethods__["i_inv"] = _phy.cpBody_i_inv_get
    if _newclass:i_inv = _swig_property(_phy.cpBody_i_inv_get, _phy.cpBody_i_inv_set)
    __swig_setmethods__["p"] = _phy.cpBody_p_set
    __swig_getmethods__["p"] = _phy.cpBody_p_get
    if _newclass:p = _swig_property(_phy.cpBody_p_get, _phy.cpBody_p_set)
    __swig_setmethods__["v"] = _phy.cpBody_v_set
    __swig_getmethods__["v"] = _phy.cpBody_v_get
    if _newclass:v = _swig_property(_phy.cpBody_v_get, _phy.cpBody_v_set)
    __swig_setmethods__["f"] = _phy.cpBody_f_set
    __swig_getmethods__["f"] = _phy.cpBody_f_get
    if _newclass:f = _swig_property(_phy.cpBody_f_get, _phy.cpBody_f_set)
    __swig_setmethods__["a"] = _phy.cpBody_a_set
    __swig_getmethods__["a"] = _phy.cpBody_a_get
    if _newclass:a = _swig_property(_phy.cpBody_a_get, _phy.cpBody_a_set)
    __swig_setmethods__["w"] = _phy.cpBody_w_set
    __swig_getmethods__["w"] = _phy.cpBody_w_get
    if _newclass:w = _swig_property(_phy.cpBody_w_get, _phy.cpBody_w_set)
    __swig_setmethods__["t"] = _phy.cpBody_t_set
    __swig_getmethods__["t"] = _phy.cpBody_t_get
    if _newclass:t = _swig_property(_phy.cpBody_t_get, _phy.cpBody_t_set)
    __swig_setmethods__["rot"] = _phy.cpBody_rot_set
    __swig_getmethods__["rot"] = _phy.cpBody_rot_get
    if _newclass:rot = _swig_property(_phy.cpBody_rot_get, _phy.cpBody_rot_set)
    __swig_setmethods__["data"] = _phy.cpBody_data_set
    __swig_getmethods__["data"] = _phy.cpBody_data_get
    if _newclass:data = _swig_property(_phy.cpBody_data_get, _phy.cpBody_data_set)
    __swig_setmethods__["v_limit"] = _phy.cpBody_v_limit_set
    __swig_getmethods__["v_limit"] = _phy.cpBody_v_limit_get
    if _newclass:v_limit = _swig_property(_phy.cpBody_v_limit_get, _phy.cpBody_v_limit_set)
    __swig_setmethods__["w_limit"] = _phy.cpBody_w_limit_set
    __swig_getmethods__["w_limit"] = _phy.cpBody_w_limit_get
    if _newclass:w_limit = _swig_property(_phy.cpBody_w_limit_get, _phy.cpBody_w_limit_set)
    def __init__(self): 
        this = _phy.new_cpBody()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _phy.delete_cpBody
    __del__ = lambda self : None;
cpBody_swigregister = _phy.cpBody_swigregister
cpBody_swigregister(cpBody)

class cpCollisionHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpCollisionHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpCollisionHandler, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _phy.cpCollisionHandler_a_set
    __swig_getmethods__["a"] = _phy.cpCollisionHandler_a_get
    if _newclass:a = _swig_property(_phy.cpCollisionHandler_a_get, _phy.cpCollisionHandler_a_set)
    __swig_setmethods__["b"] = _phy.cpCollisionHandler_b_set
    __swig_getmethods__["b"] = _phy.cpCollisionHandler_b_get
    if _newclass:b = _swig_property(_phy.cpCollisionHandler_b_get, _phy.cpCollisionHandler_b_set)
    __swig_setmethods__["begin"] = _phy.cpCollisionHandler_begin_set
    __swig_getmethods__["begin"] = _phy.cpCollisionHandler_begin_get
    if _newclass:begin = _swig_property(_phy.cpCollisionHandler_begin_get, _phy.cpCollisionHandler_begin_set)
    __swig_setmethods__["preSolve"] = _phy.cpCollisionHandler_preSolve_set
    __swig_getmethods__["preSolve"] = _phy.cpCollisionHandler_preSolve_get
    if _newclass:preSolve = _swig_property(_phy.cpCollisionHandler_preSolve_get, _phy.cpCollisionHandler_preSolve_set)
    __swig_setmethods__["postSolve"] = _phy.cpCollisionHandler_postSolve_set
    __swig_getmethods__["postSolve"] = _phy.cpCollisionHandler_postSolve_get
    if _newclass:postSolve = _swig_property(_phy.cpCollisionHandler_postSolve_get, _phy.cpCollisionHandler_postSolve_set)
    __swig_setmethods__["separate"] = _phy.cpCollisionHandler_separate_set
    __swig_getmethods__["separate"] = _phy.cpCollisionHandler_separate_get
    if _newclass:separate = _swig_property(_phy.cpCollisionHandler_separate_get, _phy.cpCollisionHandler_separate_set)
    __swig_setmethods__["data"] = _phy.cpCollisionHandler_data_set
    __swig_getmethods__["data"] = _phy.cpCollisionHandler_data_get
    if _newclass:data = _swig_property(_phy.cpCollisionHandler_data_get, _phy.cpCollisionHandler_data_set)
    def __init__(self): 
        this = _phy.new_cpCollisionHandler()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _phy.delete_cpCollisionHandler
    __del__ = lambda self : None;
cpCollisionHandler_swigregister = _phy.cpCollisionHandler_swigregister
cpCollisionHandler_swigregister(cpCollisionHandler)

CP_MAX_CONTACTS_PER_ARBITER = _phy.CP_MAX_CONTACTS_PER_ARBITER
cpArbiterStateFirstColl = _phy.cpArbiterStateFirstColl
cpArbiterStateNormal = _phy.cpArbiterStateNormal
cpArbiterStateIgnore = _phy.cpArbiterStateIgnore
cpArbiterStateCached = _phy.cpArbiterStateCached
class cpArbiterThread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpArbiterThread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpArbiterThread, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _phy.cpArbiterThread_next_set
    __swig_getmethods__["next"] = _phy.cpArbiterThread_next_get
    if _newclass:next = _swig_property(_phy.cpArbiterThread_next_get, _phy.cpArbiterThread_next_set)
    __swig_setmethods__["prev"] = _phy.cpArbiterThread_prev_set
    __swig_getmethods__["prev"] = _phy.cpArbiterThread_prev_get
    if _newclass:prev = _swig_property(_phy.cpArbiterThread_prev_get, _phy.cpArbiterThread_prev_set)
    def __init__(self): 
        this = _phy.new_cpArbiterThread()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _phy.delete_cpArbiterThread
    __del__ = lambda self : None;
cpArbiterThread_swigregister = _phy.cpArbiterThread_swigregister
cpArbiterThread_swigregister(cpArbiterThread)

class cpArbiter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpArbiter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpArbiter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["e"] = _phy.cpArbiter_e_set
    __swig_getmethods__["e"] = _phy.cpArbiter_e_get
    if _newclass:e = _swig_property(_phy.cpArbiter_e_get, _phy.cpArbiter_e_set)
    __swig_setmethods__["u"] = _phy.cpArbiter_u_set
    __swig_getmethods__["u"] = _phy.cpArbiter_u_get
    if _newclass:u = _swig_property(_phy.cpArbiter_u_get, _phy.cpArbiter_u_set)
    __swig_setmethods__["surface_vr"] = _phy.cpArbiter_surface_vr_set
    __swig_getmethods__["surface_vr"] = _phy.cpArbiter_surface_vr_get
    if _newclass:surface_vr = _swig_property(_phy.cpArbiter_surface_vr_get, _phy.cpArbiter_surface_vr_set)
    __swig_setmethods__["data"] = _phy.cpArbiter_data_set
    __swig_getmethods__["data"] = _phy.cpArbiter_data_get
    if _newclass:data = _swig_property(_phy.cpArbiter_data_get, _phy.cpArbiter_data_set)
    __swig_setmethods__["a_private"] = _phy.cpArbiter_a_private_set
    __swig_getmethods__["a_private"] = _phy.cpArbiter_a_private_get
    if _newclass:a_private = _swig_property(_phy.cpArbiter_a_private_get, _phy.cpArbiter_a_private_set)
    __swig_setmethods__["b_private"] = _phy.cpArbiter_b_private_set
    __swig_getmethods__["b_private"] = _phy.cpArbiter_b_private_get
    if _newclass:b_private = _swig_property(_phy.cpArbiter_b_private_get, _phy.cpArbiter_b_private_set)
    __swig_setmethods__["body_a_private"] = _phy.cpArbiter_body_a_private_set
    __swig_getmethods__["body_a_private"] = _phy.cpArbiter_body_a_private_get
    if _newclass:body_a_private = _swig_property(_phy.cpArbiter_body_a_private_get, _phy.cpArbiter_body_a_private_set)
    __swig_setmethods__["body_b_private"] = _phy.cpArbiter_body_b_private_set
    __swig_getmethods__["body_b_private"] = _phy.cpArbiter_body_b_private_get
    if _newclass:body_b_private = _swig_property(_phy.cpArbiter_body_b_private_get, _phy.cpArbiter_body_b_private_set)
    def __init__(self): 
        this = _phy.new_cpArbiter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _phy.delete_cpArbiter
    __del__ = lambda self : None;
cpArbiter_swigregister = _phy.cpArbiter_swigregister
cpArbiter_swigregister(cpArbiter)


def cpArbiterGetElasticity(*args):
  return _phy.cpArbiterGetElasticity(*args)
cpArbiterGetElasticity = _phy.cpArbiterGetElasticity

def cpArbiterSetElasticity(*args):
  return _phy.cpArbiterSetElasticity(*args)
cpArbiterSetElasticity = _phy.cpArbiterSetElasticity

def cpArbiterGetFriction(*args):
  return _phy.cpArbiterGetFriction(*args)
cpArbiterGetFriction = _phy.cpArbiterGetFriction

def cpArbiterSetFriction(*args):
  return _phy.cpArbiterSetFriction(*args)
cpArbiterSetFriction = _phy.cpArbiterSetFriction

def cpArbiterGetSurfaceVelocity(*args):
  return _phy.cpArbiterGetSurfaceVelocity(*args)
cpArbiterGetSurfaceVelocity = _phy.cpArbiterGetSurfaceVelocity

def cpArbiterSetSurfaceVelocity(*args):
  return _phy.cpArbiterSetSurfaceVelocity(*args)
cpArbiterSetSurfaceVelocity = _phy.cpArbiterSetSurfaceVelocity

def cpArbiterGetUserData(*args):
  return _phy.cpArbiterGetUserData(*args)
cpArbiterGetUserData = _phy.cpArbiterGetUserData

def cpArbiterSetUserData(*args):
  return _phy.cpArbiterSetUserData(*args)
cpArbiterSetUserData = _phy.cpArbiterSetUserData

def cpArbiterTotalImpulse(*args):
  return _phy.cpArbiterTotalImpulse(*args)
cpArbiterTotalImpulse = _phy.cpArbiterTotalImpulse

def cpArbiterTotalImpulseWithFriction(*args):
  return _phy.cpArbiterTotalImpulseWithFriction(*args)
cpArbiterTotalImpulseWithFriction = _phy.cpArbiterTotalImpulseWithFriction

def cpArbiterTotalKE(*args):
  return _phy.cpArbiterTotalKE(*args)
cpArbiterTotalKE = _phy.cpArbiterTotalKE

def cpArbiterIgnore(*args):
  return _phy.cpArbiterIgnore(*args)
cpArbiterIgnore = _phy.cpArbiterIgnore

def cpArbiterGetShapes(*args):
  return _phy.cpArbiterGetShapes(*args)
cpArbiterGetShapes = _phy.cpArbiterGetShapes

def cpArbiterGetBodies(*args):
  return _phy.cpArbiterGetBodies(*args)
cpArbiterGetBodies = _phy.cpArbiterGetBodies

def cpArbiterGetContactPointSet(*args):
  return _phy.cpArbiterGetContactPointSet(*args)
cpArbiterGetContactPointSet = _phy.cpArbiterGetContactPointSet

def cpArbiterSetContactPointSet(*args):
  return _phy.cpArbiterSetContactPointSet(*args)
cpArbiterSetContactPointSet = _phy.cpArbiterSetContactPointSet

def cpArbiterIsFirstContact(*args):
  return _phy.cpArbiterIsFirstContact(*args)
cpArbiterIsFirstContact = _phy.cpArbiterIsFirstContact

def cpArbiterGetCount(*args):
  return _phy.cpArbiterGetCount(*args)
cpArbiterGetCount = _phy.cpArbiterGetCount

def cpArbiterGetNormal(*args):
  return _phy.cpArbiterGetNormal(*args)
cpArbiterGetNormal = _phy.cpArbiterGetNormal

def cpArbiterGetPoint(*args):
  return _phy.cpArbiterGetPoint(*args)
cpArbiterGetPoint = _phy.cpArbiterGetPoint

def cpArbiterGetDepth(*args):
  return _phy.cpArbiterGetDepth(*args)
cpArbiterGetDepth = _phy.cpArbiterGetDepth
class cpNearestPointQueryInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpNearestPointQueryInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpNearestPointQueryInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["shape"] = _phy.cpNearestPointQueryInfo_shape_set
    __swig_getmethods__["shape"] = _phy.cpNearestPointQueryInfo_shape_get
    if _newclass:shape = _swig_property(_phy.cpNearestPointQueryInfo_shape_get, _phy.cpNearestPointQueryInfo_shape_set)
    __swig_setmethods__["p"] = _phy.cpNearestPointQueryInfo_p_set
    __swig_getmethods__["p"] = _phy.cpNearestPointQueryInfo_p_get
    if _newclass:p = _swig_property(_phy.cpNearestPointQueryInfo_p_get, _phy.cpNearestPointQueryInfo_p_set)
    __swig_setmethods__["d"] = _phy.cpNearestPointQueryInfo_d_set
    __swig_getmethods__["d"] = _phy.cpNearestPointQueryInfo_d_get
    if _newclass:d = _swig_property(_phy.cpNearestPointQueryInfo_d_get, _phy.cpNearestPointQueryInfo_d_set)
    __swig_setmethods__["g"] = _phy.cpNearestPointQueryInfo_g_set
    __swig_getmethods__["g"] = _phy.cpNearestPointQueryInfo_g_get
    if _newclass:g = _swig_property(_phy.cpNearestPointQueryInfo_g_get, _phy.cpNearestPointQueryInfo_g_set)
    def __init__(self): 
        this = _phy.new_cpNearestPointQueryInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _phy.delete_cpNearestPointQueryInfo
    __del__ = lambda self : None;
cpNearestPointQueryInfo_swigregister = _phy.cpNearestPointQueryInfo_swigregister
cpNearestPointQueryInfo_swigregister(cpNearestPointQueryInfo)

class cpSegmentQueryInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpSegmentQueryInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpSegmentQueryInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["shape"] = _phy.cpSegmentQueryInfo_shape_set
    __swig_getmethods__["shape"] = _phy.cpSegmentQueryInfo_shape_get
    if _newclass:shape = _swig_property(_phy.cpSegmentQueryInfo_shape_get, _phy.cpSegmentQueryInfo_shape_set)
    __swig_setmethods__["t"] = _phy.cpSegmentQueryInfo_t_set
    __swig_getmethods__["t"] = _phy.cpSegmentQueryInfo_t_get
    if _newclass:t = _swig_property(_phy.cpSegmentQueryInfo_t_get, _phy.cpSegmentQueryInfo_t_set)
    __swig_setmethods__["n"] = _phy.cpSegmentQueryInfo_n_set
    __swig_getmethods__["n"] = _phy.cpSegmentQueryInfo_n_get
    if _newclass:n = _swig_property(_phy.cpSegmentQueryInfo_n_get, _phy.cpSegmentQueryInfo_n_set)
    def __init__(self): 
        this = _phy.new_cpSegmentQueryInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _phy.delete_cpSegmentQueryInfo
    __del__ = lambda self : None;
cpSegmentQueryInfo_swigregister = _phy.cpSegmentQueryInfo_swigregister
cpSegmentQueryInfo_swigregister(cpSegmentQueryInfo)

CP_CIRCLE_SHAPE = _phy.CP_CIRCLE_SHAPE
CP_SEGMENT_SHAPE = _phy.CP_SEGMENT_SHAPE
CP_POLY_SHAPE = _phy.CP_POLY_SHAPE
CP_NUM_SHAPES = _phy.CP_NUM_SHAPES
class cpShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpShape, name)
    __repr__ = _swig_repr
    __swig_setmethods__["body"] = _phy.cpShape_body_set
    __swig_getmethods__["body"] = _phy.cpShape_body_get
    if _newclass:body = _swig_property(_phy.cpShape_body_get, _phy.cpShape_body_set)
    __swig_setmethods__["bb"] = _phy.cpShape_bb_set
    __swig_getmethods__["bb"] = _phy.cpShape_bb_get
    if _newclass:bb = _swig_property(_phy.cpShape_bb_get, _phy.cpShape_bb_set)
    __swig_setmethods__["sensor"] = _phy.cpShape_sensor_set
    __swig_getmethods__["sensor"] = _phy.cpShape_sensor_get
    if _newclass:sensor = _swig_property(_phy.cpShape_sensor_get, _phy.cpShape_sensor_set)
    __swig_setmethods__["e"] = _phy.cpShape_e_set
    __swig_getmethods__["e"] = _phy.cpShape_e_get
    if _newclass:e = _swig_property(_phy.cpShape_e_get, _phy.cpShape_e_set)
    __swig_setmethods__["u"] = _phy.cpShape_u_set
    __swig_getmethods__["u"] = _phy.cpShape_u_get
    if _newclass:u = _swig_property(_phy.cpShape_u_get, _phy.cpShape_u_set)
    __swig_setmethods__["surface_v"] = _phy.cpShape_surface_v_set
    __swig_getmethods__["surface_v"] = _phy.cpShape_surface_v_get
    if _newclass:surface_v = _swig_property(_phy.cpShape_surface_v_get, _phy.cpShape_surface_v_set)
    __swig_setmethods__["data"] = _phy.cpShape_data_set
    __swig_getmethods__["data"] = _phy.cpShape_data_get
    if _newclass:data = _swig_property(_phy.cpShape_data_get, _phy.cpShape_data_set)
    __swig_setmethods__["collision_type"] = _phy.cpShape_collision_type_set
    __swig_getmethods__["collision_type"] = _phy.cpShape_collision_type_get
    if _newclass:collision_type = _swig_property(_phy.cpShape_collision_type_get, _phy.cpShape_collision_type_set)
    __swig_setmethods__["group"] = _phy.cpShape_group_set
    __swig_getmethods__["group"] = _phy.cpShape_group_get
    if _newclass:group = _swig_property(_phy.cpShape_group_get, _phy.cpShape_group_set)
    __swig_setmethods__["layers"] = _phy.cpShape_layers_set
    __swig_getmethods__["layers"] = _phy.cpShape_layers_get
    if _newclass:layers = _swig_property(_phy.cpShape_layers_get, _phy.cpShape_layers_set)
    __swig_setmethods__["hashid_private"] = _phy.cpShape_hashid_private_set
    __swig_getmethods__["hashid_private"] = _phy.cpShape_hashid_private_get
    if _newclass:hashid_private = _swig_property(_phy.cpShape_hashid_private_get, _phy.cpShape_hashid_private_set)
    def __init__(self): 
        this = _phy.new_cpShape()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _phy.delete_cpShape
    __del__ = lambda self : None;
cpShape_swigregister = _phy.cpShape_swigregister
cpShape_swigregister(cpShape)


def cpShapeDestroy(*args):
  return _phy.cpShapeDestroy(*args)
cpShapeDestroy = _phy.cpShapeDestroy

def cpShapeFree(*args):
  return _phy.cpShapeFree(*args)
cpShapeFree = _phy.cpShapeFree

def cpShapeCacheBB(*args):
  return _phy.cpShapeCacheBB(*args)
cpShapeCacheBB = _phy.cpShapeCacheBB

def cpShapeUpdate(*args):
  return _phy.cpShapeUpdate(*args)
cpShapeUpdate = _phy.cpShapeUpdate

def cpShapePointQuery(*args):
  return _phy.cpShapePointQuery(*args)
cpShapePointQuery = _phy.cpShapePointQuery

def cpShapeNearestPointQuery(*args):
  return _phy.cpShapeNearestPointQuery(*args)
cpShapeNearestPointQuery = _phy.cpShapeNearestPointQuery

def cpShapeSegmentQuery(*args):
  return _phy.cpShapeSegmentQuery(*args)
cpShapeSegmentQuery = _phy.cpShapeSegmentQuery

def cpSegmentQueryHitPoint(*args):
  return _phy.cpSegmentQueryHitPoint(*args)
cpSegmentQueryHitPoint = _phy.cpSegmentQueryHitPoint

def cpSegmentQueryHitDist(*args):
  return _phy.cpSegmentQueryHitDist(*args)
cpSegmentQueryHitDist = _phy.cpSegmentQueryHitDist

def cpShapeGetSpace(*args):
  return _phy.cpShapeGetSpace(*args)
cpShapeGetSpace = _phy.cpShapeGetSpace

def cpShapeGetBody(*args):
  return _phy.cpShapeGetBody(*args)
cpShapeGetBody = _phy.cpShapeGetBody

def cpShapeSetBody(*args):
  return _phy.cpShapeSetBody(*args)
cpShapeSetBody = _phy.cpShapeSetBody

def cpShapeGetBB(*args):
  return _phy.cpShapeGetBB(*args)
cpShapeGetBB = _phy.cpShapeGetBB

def cpShapeGetSensor(*args):
  return _phy.cpShapeGetSensor(*args)
cpShapeGetSensor = _phy.cpShapeGetSensor

def cpShapeSetSensor(*args):
  return _phy.cpShapeSetSensor(*args)
cpShapeSetSensor = _phy.cpShapeSetSensor

def cpShapeGetElasticity(*args):
  return _phy.cpShapeGetElasticity(*args)
cpShapeGetElasticity = _phy.cpShapeGetElasticity

def cpShapeSetElasticity(*args):
  return _phy.cpShapeSetElasticity(*args)
cpShapeSetElasticity = _phy.cpShapeSetElasticity

def cpShapeGetFriction(*args):
  return _phy.cpShapeGetFriction(*args)
cpShapeGetFriction = _phy.cpShapeGetFriction

def cpShapeSetFriction(*args):
  return _phy.cpShapeSetFriction(*args)
cpShapeSetFriction = _phy.cpShapeSetFriction

def cpShapeGetSurfaceVelocity(*args):
  return _phy.cpShapeGetSurfaceVelocity(*args)
cpShapeGetSurfaceVelocity = _phy.cpShapeGetSurfaceVelocity

def cpShapeSetSurfaceVelocity(*args):
  return _phy.cpShapeSetSurfaceVelocity(*args)
cpShapeSetSurfaceVelocity = _phy.cpShapeSetSurfaceVelocity

def cpShapeGetUserData(*args):
  return _phy.cpShapeGetUserData(*args)
cpShapeGetUserData = _phy.cpShapeGetUserData

def cpShapeSetUserData(*args):
  return _phy.cpShapeSetUserData(*args)
cpShapeSetUserData = _phy.cpShapeSetUserData

def cpShapeGetCollisionType(*args):
  return _phy.cpShapeGetCollisionType(*args)
cpShapeGetCollisionType = _phy.cpShapeGetCollisionType

def cpShapeSetCollisionType(*args):
  return _phy.cpShapeSetCollisionType(*args)
cpShapeSetCollisionType = _phy.cpShapeSetCollisionType

def cpShapeGetGroup(*args):
  return _phy.cpShapeGetGroup(*args)
cpShapeGetGroup = _phy.cpShapeGetGroup

def cpShapeSetGroup(*args):
  return _phy.cpShapeSetGroup(*args)
cpShapeSetGroup = _phy.cpShapeSetGroup

def cpShapeGetLayers(*args):
  return _phy.cpShapeGetLayers(*args)
cpShapeGetLayers = _phy.cpShapeGetLayers

def cpShapeSetLayers(*args):
  return _phy.cpShapeSetLayers(*args)
cpShapeSetLayers = _phy.cpShapeSetLayers

def cpResetShapeIdCounter():
  return _phy.cpResetShapeIdCounter()
cpResetShapeIdCounter = _phy.cpResetShapeIdCounter
class cpCircleShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpCircleShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpCircleShape, name)
    __repr__ = _swig_repr
    __swig_setmethods__["shape"] = _phy.cpCircleShape_shape_set
    __swig_getmethods__["shape"] = _phy.cpCircleShape_shape_get
    if _newclass:shape = _swig_property(_phy.cpCircleShape_shape_get, _phy.cpCircleShape_shape_set)
    __swig_setmethods__["c"] = _phy.cpCircleShape_c_set
    __swig_getmethods__["c"] = _phy.cpCircleShape_c_get
    if _newclass:c = _swig_property(_phy.cpCircleShape_c_get, _phy.cpCircleShape_c_set)
    __swig_setmethods__["tc"] = _phy.cpCircleShape_tc_set
    __swig_getmethods__["tc"] = _phy.cpCircleShape_tc_get
    if _newclass:tc = _swig_property(_phy.cpCircleShape_tc_get, _phy.cpCircleShape_tc_set)
    __swig_setmethods__["r"] = _phy.cpCircleShape_r_set
    __swig_getmethods__["r"] = _phy.cpCircleShape_r_get
    if _newclass:r = _swig_property(_phy.cpCircleShape_r_get, _phy.cpCircleShape_r_set)
    def __init__(self): 
        this = _phy.new_cpCircleShape()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _phy.delete_cpCircleShape
    __del__ = lambda self : None;
cpCircleShape_swigregister = _phy.cpCircleShape_swigregister
cpCircleShape_swigregister(cpCircleShape)


def cpCircleShapeAlloc():
  return _phy.cpCircleShapeAlloc()
cpCircleShapeAlloc = _phy.cpCircleShapeAlloc

def cpCircleShapeInit(*args):
  return _phy.cpCircleShapeInit(*args)
cpCircleShapeInit = _phy.cpCircleShapeInit

def cpCircleShapeNew(*args):
  return _phy.cpCircleShapeNew(*args)
cpCircleShapeNew = _phy.cpCircleShapeNew

def cpCircleShapeGetOffset(*args):
  return _phy.cpCircleShapeGetOffset(*args)
cpCircleShapeGetOffset = _phy.cpCircleShapeGetOffset

def cpCircleShapeGetRadius(*args):
  return _phy.cpCircleShapeGetRadius(*args)
cpCircleShapeGetRadius = _phy.cpCircleShapeGetRadius
class cpSegmentShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpSegmentShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpSegmentShape, name)
    __repr__ = _swig_repr
    __swig_setmethods__["shape"] = _phy.cpSegmentShape_shape_set
    __swig_getmethods__["shape"] = _phy.cpSegmentShape_shape_get
    if _newclass:shape = _swig_property(_phy.cpSegmentShape_shape_get, _phy.cpSegmentShape_shape_set)
    __swig_setmethods__["a"] = _phy.cpSegmentShape_a_set
    __swig_getmethods__["a"] = _phy.cpSegmentShape_a_get
    if _newclass:a = _swig_property(_phy.cpSegmentShape_a_get, _phy.cpSegmentShape_a_set)
    __swig_setmethods__["b"] = _phy.cpSegmentShape_b_set
    __swig_getmethods__["b"] = _phy.cpSegmentShape_b_get
    if _newclass:b = _swig_property(_phy.cpSegmentShape_b_get, _phy.cpSegmentShape_b_set)
    __swig_setmethods__["n"] = _phy.cpSegmentShape_n_set
    __swig_getmethods__["n"] = _phy.cpSegmentShape_n_get
    if _newclass:n = _swig_property(_phy.cpSegmentShape_n_get, _phy.cpSegmentShape_n_set)
    __swig_setmethods__["ta"] = _phy.cpSegmentShape_ta_set
    __swig_getmethods__["ta"] = _phy.cpSegmentShape_ta_get
    if _newclass:ta = _swig_property(_phy.cpSegmentShape_ta_get, _phy.cpSegmentShape_ta_set)
    __swig_setmethods__["tb"] = _phy.cpSegmentShape_tb_set
    __swig_getmethods__["tb"] = _phy.cpSegmentShape_tb_get
    if _newclass:tb = _swig_property(_phy.cpSegmentShape_tb_get, _phy.cpSegmentShape_tb_set)
    __swig_setmethods__["tn"] = _phy.cpSegmentShape_tn_set
    __swig_getmethods__["tn"] = _phy.cpSegmentShape_tn_get
    if _newclass:tn = _swig_property(_phy.cpSegmentShape_tn_get, _phy.cpSegmentShape_tn_set)
    __swig_setmethods__["r"] = _phy.cpSegmentShape_r_set
    __swig_getmethods__["r"] = _phy.cpSegmentShape_r_get
    if _newclass:r = _swig_property(_phy.cpSegmentShape_r_get, _phy.cpSegmentShape_r_set)
    __swig_setmethods__["a_tangent"] = _phy.cpSegmentShape_a_tangent_set
    __swig_getmethods__["a_tangent"] = _phy.cpSegmentShape_a_tangent_get
    if _newclass:a_tangent = _swig_property(_phy.cpSegmentShape_a_tangent_get, _phy.cpSegmentShape_a_tangent_set)
    __swig_setmethods__["b_tangent"] = _phy.cpSegmentShape_b_tangent_set
    __swig_getmethods__["b_tangent"] = _phy.cpSegmentShape_b_tangent_get
    if _newclass:b_tangent = _swig_property(_phy.cpSegmentShape_b_tangent_get, _phy.cpSegmentShape_b_tangent_set)
    def __init__(self): 
        this = _phy.new_cpSegmentShape()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _phy.delete_cpSegmentShape
    __del__ = lambda self : None;
cpSegmentShape_swigregister = _phy.cpSegmentShape_swigregister
cpSegmentShape_swigregister(cpSegmentShape)


def cpSegmentShapeAlloc():
  return _phy.cpSegmentShapeAlloc()
cpSegmentShapeAlloc = _phy.cpSegmentShapeAlloc

def cpSegmentShapeInit(*args):
  return _phy.cpSegmentShapeInit(*args)
cpSegmentShapeInit = _phy.cpSegmentShapeInit

def cpSegmentShapeNew(*args):
  return _phy.cpSegmentShapeNew(*args)
cpSegmentShapeNew = _phy.cpSegmentShapeNew

def cpSegmentShapeSetNeighbors(*args):
  return _phy.cpSegmentShapeSetNeighbors(*args)
cpSegmentShapeSetNeighbors = _phy.cpSegmentShapeSetNeighbors

def cpSegmentShapeGetA(*args):
  return _phy.cpSegmentShapeGetA(*args)
cpSegmentShapeGetA = _phy.cpSegmentShapeGetA

def cpSegmentShapeGetB(*args):
  return _phy.cpSegmentShapeGetB(*args)
cpSegmentShapeGetB = _phy.cpSegmentShapeGetB

def cpSegmentShapeGetNormal(*args):
  return _phy.cpSegmentShapeGetNormal(*args)
cpSegmentShapeGetNormal = _phy.cpSegmentShapeGetNormal

def cpSegmentShapeGetRadius(*args):
  return _phy.cpSegmentShapeGetRadius(*args)
cpSegmentShapeGetRadius = _phy.cpSegmentShapeGetRadius

def cpSpaceAlloc():
  return _phy.cpSpaceAlloc()
cpSpaceAlloc = _phy.cpSpaceAlloc

def cpSpaceInit(*args):
  return _phy.cpSpaceInit(*args)
cpSpaceInit = _phy.cpSpaceInit

def cpSpaceNew():
  return _phy.cpSpaceNew()
cpSpaceNew = _phy.cpSpaceNew

def cpSpaceDestroy(*args):
  return _phy.cpSpaceDestroy(*args)
cpSpaceDestroy = _phy.cpSpaceDestroy

def cpSpaceFree(*args):
  return _phy.cpSpaceFree(*args)
cpSpaceFree = _phy.cpSpaceFree

def cpSpaceGetIterations(*args):
  return _phy.cpSpaceGetIterations(*args)
cpSpaceGetIterations = _phy.cpSpaceGetIterations

def cpSpaceSetIterations(*args):
  return _phy.cpSpaceSetIterations(*args)
cpSpaceSetIterations = _phy.cpSpaceSetIterations

def cpSpaceGetGravity(*args):
  return _phy.cpSpaceGetGravity(*args)
cpSpaceGetGravity = _phy.cpSpaceGetGravity

def cpSpaceSetGravity(*args):
  return _phy.cpSpaceSetGravity(*args)
cpSpaceSetGravity = _phy.cpSpaceSetGravity

def cpSpaceGetDamping(*args):
  return _phy.cpSpaceGetDamping(*args)
cpSpaceGetDamping = _phy.cpSpaceGetDamping

def cpSpaceSetDamping(*args):
  return _phy.cpSpaceSetDamping(*args)
cpSpaceSetDamping = _phy.cpSpaceSetDamping

def cpSpaceGetIdleSpeedThreshold(*args):
  return _phy.cpSpaceGetIdleSpeedThreshold(*args)
cpSpaceGetIdleSpeedThreshold = _phy.cpSpaceGetIdleSpeedThreshold

def cpSpaceSetIdleSpeedThreshold(*args):
  return _phy.cpSpaceSetIdleSpeedThreshold(*args)
cpSpaceSetIdleSpeedThreshold = _phy.cpSpaceSetIdleSpeedThreshold

def cpSpaceGetSleepTimeThreshold(*args):
  return _phy.cpSpaceGetSleepTimeThreshold(*args)
cpSpaceGetSleepTimeThreshold = _phy.cpSpaceGetSleepTimeThreshold

def cpSpaceSetSleepTimeThreshold(*args):
  return _phy.cpSpaceSetSleepTimeThreshold(*args)
cpSpaceSetSleepTimeThreshold = _phy.cpSpaceSetSleepTimeThreshold

def cpSpaceGetCollisionSlop(*args):
  return _phy.cpSpaceGetCollisionSlop(*args)
cpSpaceGetCollisionSlop = _phy.cpSpaceGetCollisionSlop

def cpSpaceSetCollisionSlop(*args):
  return _phy.cpSpaceSetCollisionSlop(*args)
cpSpaceSetCollisionSlop = _phy.cpSpaceSetCollisionSlop

def cpSpaceGetCollisionBias(*args):
  return _phy.cpSpaceGetCollisionBias(*args)
cpSpaceGetCollisionBias = _phy.cpSpaceGetCollisionBias

def cpSpaceSetCollisionBias(*args):
  return _phy.cpSpaceSetCollisionBias(*args)
cpSpaceSetCollisionBias = _phy.cpSpaceSetCollisionBias

def cpSpaceGetCollisionPersistence(*args):
  return _phy.cpSpaceGetCollisionPersistence(*args)
cpSpaceGetCollisionPersistence = _phy.cpSpaceGetCollisionPersistence

def cpSpaceSetCollisionPersistence(*args):
  return _phy.cpSpaceSetCollisionPersistence(*args)
cpSpaceSetCollisionPersistence = _phy.cpSpaceSetCollisionPersistence

def cpSpaceGetEnableContactGraph(*args):
  return _phy.cpSpaceGetEnableContactGraph(*args)
cpSpaceGetEnableContactGraph = _phy.cpSpaceGetEnableContactGraph

def cpSpaceSetEnableContactGraph(*args):
  return _phy.cpSpaceSetEnableContactGraph(*args)
cpSpaceSetEnableContactGraph = _phy.cpSpaceSetEnableContactGraph

def cpSpaceGetUserData(*args):
  return _phy.cpSpaceGetUserData(*args)
cpSpaceGetUserData = _phy.cpSpaceGetUserData

def cpSpaceSetUserData(*args):
  return _phy.cpSpaceSetUserData(*args)
cpSpaceSetUserData = _phy.cpSpaceSetUserData

def cpSpaceGetStaticBody(*args):
  return _phy.cpSpaceGetStaticBody(*args)
cpSpaceGetStaticBody = _phy.cpSpaceGetStaticBody

def cpSpaceGetCurrentTimeStep(*args):
  return _phy.cpSpaceGetCurrentTimeStep(*args)
cpSpaceGetCurrentTimeStep = _phy.cpSpaceGetCurrentTimeStep

def cpSpaceIsLocked(*args):
  return _phy.cpSpaceIsLocked(*args)
cpSpaceIsLocked = _phy.cpSpaceIsLocked

def cpSpaceSetDefaultCollisionHandler(*args):
  return _phy.cpSpaceSetDefaultCollisionHandler(*args)
cpSpaceSetDefaultCollisionHandler = _phy.cpSpaceSetDefaultCollisionHandler

def cpSpaceAddCollisionHandler(*args):
  return _phy.cpSpaceAddCollisionHandler(*args)
cpSpaceAddCollisionHandler = _phy.cpSpaceAddCollisionHandler

def cpSpaceRemoveCollisionHandler(*args):
  return _phy.cpSpaceRemoveCollisionHandler(*args)
cpSpaceRemoveCollisionHandler = _phy.cpSpaceRemoveCollisionHandler

def cpSpaceAddShape(*args):
  return _phy.cpSpaceAddShape(*args)
cpSpaceAddShape = _phy.cpSpaceAddShape

def cpSpaceAddStaticShape(*args):
  return _phy.cpSpaceAddStaticShape(*args)
cpSpaceAddStaticShape = _phy.cpSpaceAddStaticShape

def cpSpaceAddBody(*args):
  return _phy.cpSpaceAddBody(*args)
cpSpaceAddBody = _phy.cpSpaceAddBody

def cpSpaceAddConstraint(*args):
  return _phy.cpSpaceAddConstraint(*args)
cpSpaceAddConstraint = _phy.cpSpaceAddConstraint

def cpSpaceRemoveShape(*args):
  return _phy.cpSpaceRemoveShape(*args)
cpSpaceRemoveShape = _phy.cpSpaceRemoveShape

def cpSpaceRemoveStaticShape(*args):
  return _phy.cpSpaceRemoveStaticShape(*args)
cpSpaceRemoveStaticShape = _phy.cpSpaceRemoveStaticShape

def cpSpaceRemoveBody(*args):
  return _phy.cpSpaceRemoveBody(*args)
cpSpaceRemoveBody = _phy.cpSpaceRemoveBody

def cpSpaceRemoveConstraint(*args):
  return _phy.cpSpaceRemoveConstraint(*args)
cpSpaceRemoveConstraint = _phy.cpSpaceRemoveConstraint

def cpSpaceContainsShape(*args):
  return _phy.cpSpaceContainsShape(*args)
cpSpaceContainsShape = _phy.cpSpaceContainsShape

def cpSpaceContainsBody(*args):
  return _phy.cpSpaceContainsBody(*args)
cpSpaceContainsBody = _phy.cpSpaceContainsBody

def cpSpaceContainsConstraint(*args):
  return _phy.cpSpaceContainsConstraint(*args)
cpSpaceContainsConstraint = _phy.cpSpaceContainsConstraint

def cpSpaceConvertBodyToStatic(*args):
  return _phy.cpSpaceConvertBodyToStatic(*args)
cpSpaceConvertBodyToStatic = _phy.cpSpaceConvertBodyToStatic

def cpSpaceConvertBodyToDynamic(*args):
  return _phy.cpSpaceConvertBodyToDynamic(*args)
cpSpaceConvertBodyToDynamic = _phy.cpSpaceConvertBodyToDynamic

def cpSpaceAddPostStepCallback(*args):
  return _phy.cpSpaceAddPostStepCallback(*args)
cpSpaceAddPostStepCallback = _phy.cpSpaceAddPostStepCallback

def cpSpacePointQuery(*args):
  return _phy.cpSpacePointQuery(*args)
cpSpacePointQuery = _phy.cpSpacePointQuery

def cpSpacePointQueryFirst(*args):
  return _phy.cpSpacePointQueryFirst(*args)
cpSpacePointQueryFirst = _phy.cpSpacePointQueryFirst

def cpSpaceNearestPointQuery(*args):
  return _phy.cpSpaceNearestPointQuery(*args)
cpSpaceNearestPointQuery = _phy.cpSpaceNearestPointQuery

def cpSpaceNearestPointQueryNearest(*args):
  return _phy.cpSpaceNearestPointQueryNearest(*args)
cpSpaceNearestPointQueryNearest = _phy.cpSpaceNearestPointQueryNearest

def cpSpaceSegmentQuery(*args):
  return _phy.cpSpaceSegmentQuery(*args)
cpSpaceSegmentQuery = _phy.cpSpaceSegmentQuery

def cpSpaceSegmentQueryFirst(*args):
  return _phy.cpSpaceSegmentQueryFirst(*args)
cpSpaceSegmentQueryFirst = _phy.cpSpaceSegmentQueryFirst

def cpSpaceBBQuery(*args):
  return _phy.cpSpaceBBQuery(*args)
cpSpaceBBQuery = _phy.cpSpaceBBQuery

def cpSpaceShapeQuery(*args):
  return _phy.cpSpaceShapeQuery(*args)
cpSpaceShapeQuery = _phy.cpSpaceShapeQuery

def cpSpaceActivateShapesTouchingShape(*args):
  return _phy.cpSpaceActivateShapesTouchingShape(*args)
cpSpaceActivateShapesTouchingShape = _phy.cpSpaceActivateShapesTouchingShape

def cpSpaceEachBody(*args):
  return _phy.cpSpaceEachBody(*args)
cpSpaceEachBody = _phy.cpSpaceEachBody

def cpSpaceEachShape(*args):
  return _phy.cpSpaceEachShape(*args)
cpSpaceEachShape = _phy.cpSpaceEachShape

def cpSpaceEachConstraint(*args):
  return _phy.cpSpaceEachConstraint(*args)
cpSpaceEachConstraint = _phy.cpSpaceEachConstraint

def cpSpaceReindexStatic(*args):
  return _phy.cpSpaceReindexStatic(*args)
cpSpaceReindexStatic = _phy.cpSpaceReindexStatic

def cpSpaceReindexShape(*args):
  return _phy.cpSpaceReindexShape(*args)
cpSpaceReindexShape = _phy.cpSpaceReindexShape

def cpSpaceReindexShapesForBody(*args):
  return _phy.cpSpaceReindexShapesForBody(*args)
cpSpaceReindexShapesForBody = _phy.cpSpaceReindexShapesForBody

def cpSpaceUseSpatialHash(*args):
  return _phy.cpSpaceUseSpatialHash(*args)
cpSpaceUseSpatialHash = _phy.cpSpaceUseSpatialHash

def cpSpaceStep(*args):
  return _phy.cpSpaceStep(*args)
cpSpaceStep = _phy.cpSpaceStep

def cpBodyAlloc():
  return _phy.cpBodyAlloc()
cpBodyAlloc = _phy.cpBodyAlloc

def cpBodyInit(*args):
  return _phy.cpBodyInit(*args)
cpBodyInit = _phy.cpBodyInit

def cpBodyNew(*args):
  return _phy.cpBodyNew(*args)
cpBodyNew = _phy.cpBodyNew

def cpBodyInitStatic(*args):
  return _phy.cpBodyInitStatic(*args)
cpBodyInitStatic = _phy.cpBodyInitStatic

def cpBodyNewStatic():
  return _phy.cpBodyNewStatic()
cpBodyNewStatic = _phy.cpBodyNewStatic

def cpBodyDestroy(*args):
  return _phy.cpBodyDestroy(*args)
cpBodyDestroy = _phy.cpBodyDestroy

def cpBodyFree(*args):
  return _phy.cpBodyFree(*args)
cpBodyFree = _phy.cpBodyFree

def cpBodyActivate(*args):
  return _phy.cpBodyActivate(*args)
cpBodyActivate = _phy.cpBodyActivate

def cpBodyActivateStatic(*args):
  return _phy.cpBodyActivateStatic(*args)
cpBodyActivateStatic = _phy.cpBodyActivateStatic

def cpBodySleep(*args):
  return _phy.cpBodySleep(*args)
cpBodySleep = _phy.cpBodySleep

def cpBodySleepWithGroup(*args):
  return _phy.cpBodySleepWithGroup(*args)
cpBodySleepWithGroup = _phy.cpBodySleepWithGroup

def cpBodyIsSleeping(*args):
  return _phy.cpBodyIsSleeping(*args)
cpBodyIsSleeping = _phy.cpBodyIsSleeping

def cpBodyIsStatic(*args):
  return _phy.cpBodyIsStatic(*args)
cpBodyIsStatic = _phy.cpBodyIsStatic

def cpBodyIsRogue(*args):
  return _phy.cpBodyIsRogue(*args)
cpBodyIsRogue = _phy.cpBodyIsRogue

def cpBodyGetSpace(*args):
  return _phy.cpBodyGetSpace(*args)
cpBodyGetSpace = _phy.cpBodyGetSpace

def cpBodyGetMass(*args):
  return _phy.cpBodyGetMass(*args)
cpBodyGetMass = _phy.cpBodyGetMass

def cpBodySetMass(*args):
  return _phy.cpBodySetMass(*args)
cpBodySetMass = _phy.cpBodySetMass

def cpBodyGetMoment(*args):
  return _phy.cpBodyGetMoment(*args)
cpBodyGetMoment = _phy.cpBodyGetMoment

def cpBodySetMoment(*args):
  return _phy.cpBodySetMoment(*args)
cpBodySetMoment = _phy.cpBodySetMoment

def cpBodyGetPos(*args):
  return _phy.cpBodyGetPos(*args)
cpBodyGetPos = _phy.cpBodyGetPos

def cpBodySetPos(*args):
  return _phy.cpBodySetPos(*args)
cpBodySetPos = _phy.cpBodySetPos

def cpBodyGetVel(*args):
  return _phy.cpBodyGetVel(*args)
cpBodyGetVel = _phy.cpBodyGetVel

def cpBodySetVel(*args):
  return _phy.cpBodySetVel(*args)
cpBodySetVel = _phy.cpBodySetVel

def cpBodyGetForce(*args):
  return _phy.cpBodyGetForce(*args)
cpBodyGetForce = _phy.cpBodyGetForce

def cpBodySetForce(*args):
  return _phy.cpBodySetForce(*args)
cpBodySetForce = _phy.cpBodySetForce

def cpBodyGetAngle(*args):
  return _phy.cpBodyGetAngle(*args)
cpBodyGetAngle = _phy.cpBodyGetAngle

def cpBodySetAngle(*args):
  return _phy.cpBodySetAngle(*args)
cpBodySetAngle = _phy.cpBodySetAngle

def cpBodyGetAngVel(*args):
  return _phy.cpBodyGetAngVel(*args)
cpBodyGetAngVel = _phy.cpBodyGetAngVel

def cpBodySetAngVel(*args):
  return _phy.cpBodySetAngVel(*args)
cpBodySetAngVel = _phy.cpBodySetAngVel

def cpBodyGetTorque(*args):
  return _phy.cpBodyGetTorque(*args)
cpBodyGetTorque = _phy.cpBodyGetTorque

def cpBodySetTorque(*args):
  return _phy.cpBodySetTorque(*args)
cpBodySetTorque = _phy.cpBodySetTorque

def cpBodyGetRot(*args):
  return _phy.cpBodyGetRot(*args)
cpBodyGetRot = _phy.cpBodyGetRot

def cpBodyGetVelLimit(*args):
  return _phy.cpBodyGetVelLimit(*args)
cpBodyGetVelLimit = _phy.cpBodyGetVelLimit

def cpBodySetVelLimit(*args):
  return _phy.cpBodySetVelLimit(*args)
cpBodySetVelLimit = _phy.cpBodySetVelLimit

def cpBodyGetAngVelLimit(*args):
  return _phy.cpBodyGetAngVelLimit(*args)
cpBodyGetAngVelLimit = _phy.cpBodyGetAngVelLimit

def cpBodySetAngVelLimit(*args):
  return _phy.cpBodySetAngVelLimit(*args)
cpBodySetAngVelLimit = _phy.cpBodySetAngVelLimit

def cpBodyGetUserData(*args):
  return _phy.cpBodyGetUserData(*args)
cpBodyGetUserData = _phy.cpBodyGetUserData

def cpBodySetUserData(*args):
  return _phy.cpBodySetUserData(*args)
cpBodySetUserData = _phy.cpBodySetUserData

def cpBodyLocal2World(*args):
  return _phy.cpBodyLocal2World(*args)
cpBodyLocal2World = _phy.cpBodyLocal2World

def cpBodyWorld2Local(*args):
  return _phy.cpBodyWorld2Local(*args)
cpBodyWorld2Local = _phy.cpBodyWorld2Local

def cpBodyUpdateVelocity(*args):
  return _phy.cpBodyUpdateVelocity(*args)
cpBodyUpdateVelocity = _phy.cpBodyUpdateVelocity

def cpBodyUpdatePosition(*args):
  return _phy.cpBodyUpdatePosition(*args)
cpBodyUpdatePosition = _phy.cpBodyUpdatePosition

def cpBodyResetForces(*args):
  return _phy.cpBodyResetForces(*args)
cpBodyResetForces = _phy.cpBodyResetForces

def cpBodyApplyForce(*args):
  return _phy.cpBodyApplyForce(*args)
cpBodyApplyForce = _phy.cpBodyApplyForce

def cpBodyApplyImpulse(*args):
  return _phy.cpBodyApplyImpulse(*args)
cpBodyApplyImpulse = _phy.cpBodyApplyImpulse

def cpBodyGetVelAtWorldPoint(*args):
  return _phy.cpBodyGetVelAtWorldPoint(*args)
cpBodyGetVelAtWorldPoint = _phy.cpBodyGetVelAtWorldPoint

def cpBodyGetVelAtLocalPoint(*args):
  return _phy.cpBodyGetVelAtLocalPoint(*args)
cpBodyGetVelAtLocalPoint = _phy.cpBodyGetVelAtLocalPoint

def cpBodyKineticEnergy(*args):
  return _phy.cpBodyKineticEnergy(*args)
cpBodyKineticEnergy = _phy.cpBodyKineticEnergy

def cpMomentForCircle(*args):
  return _phy.cpMomentForCircle(*args)
cpMomentForCircle = _phy.cpMomentForCircle

def cpAreaForCircle(*args):
  return _phy.cpAreaForCircle(*args)
cpAreaForCircle = _phy.cpAreaForCircle

def cpMomentForSegment(*args):
  return _phy.cpMomentForSegment(*args)
cpMomentForSegment = _phy.cpMomentForSegment

def cpAreaForSegment(*args):
  return _phy.cpAreaForSegment(*args)
cpAreaForSegment = _phy.cpAreaForSegment

def cpMomentForPoly(*args):
  return _phy.cpMomentForPoly(*args)
cpMomentForPoly = _phy.cpMomentForPoly

def cpAreaForPoly(*args):
  return _phy.cpAreaForPoly(*args)
cpAreaForPoly = _phy.cpAreaForPoly

def cpCentroidForPoly(*args):
  return _phy.cpCentroidForPoly(*args)
cpCentroidForPoly = _phy.cpCentroidForPoly

def cpRecenterPoly(*args):
  return _phy.cpRecenterPoly(*args)
cpRecenterPoly = _phy.cpRecenterPoly

def cpMomentForBox(*args):
  return _phy.cpMomentForBox(*args)
cpMomentForBox = _phy.cpMomentForBox

def cpMomentForBox2(*args):
  return _phy.cpMomentForBox2(*args)
cpMomentForBox2 = _phy.cpMomentForBox2

def cpConvexHull(*args):
  return _phy.cpConvexHull(*args)
cpConvexHull = _phy.cpConvexHull

def cpv(*args):
  return _phy.cpv(*args)
cpv = _phy.cpv
# This file is compatible with both classic and new-style classes.


